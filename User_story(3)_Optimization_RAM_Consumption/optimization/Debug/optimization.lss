
optimization.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000013b6  0000142a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000145a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c7b  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091f  00000000  00000000  000021e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099a  00000000  00000000  00002b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  00003a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 01 	jmp	0x272	; 0x272 <__ctors_end>
       4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      38:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	52 09       	sbc	r21, r2
      6a:	6a d5       	rcall	.+2772   	; 0xb40 <aes_encrypt_128+0x102>
      6c:	30 36       	cpi	r19, 0x60	; 96
      6e:	a5 38       	cpi	r26, 0x85	; 133
      70:	bf 40       	sbci	r27, 0x0F	; 15
      72:	a3 9e       	mul	r10, r19
      74:	81 f3       	breq	.-32     	; 0x56 <__SREG__+0x17>
      76:	d7 fb       	bst	r29, 7
      78:	7c e3       	ldi	r23, 0x3C	; 60
      7a:	39 82       	std	Y+1, r3	; 0x01
      7c:	9b 2f       	mov	r25, r27
      7e:	ff 87       	std	Y+15, r31	; 0x0f
      80:	34 8e       	std	Z+28, r3	; 0x1c
      82:	43 44       	sbci	r20, 0x43	; 67
      84:	c4 de       	rcall	.-632    	; 0xfffffe0e <__eeprom_end+0xff7efe0e>
      86:	e9 cb       	rjmp	.-2094   	; 0xfffff85a <__eeprom_end+0xff7ef85a>
      88:	54 7b       	andi	r21, 0xB4	; 180
      8a:	94 32       	cpi	r25, 0x24	; 36
      8c:	a6 c2       	rjmp	.+1356   	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
      8e:	23 3d       	cpi	r18, 0xD3	; 211
      90:	ee 4c       	sbci	r30, 0xCE	; 206
      92:	95 0b       	sbc	r25, r21
      94:	42 fa       	bst	r4, 2
      96:	c3 4e       	sbci	r28, 0xE3	; 227
      98:	08 2e       	mov	r0, r24
      9a:	a1 66       	ori	r26, 0x61	; 97
      9c:	28 d9       	rcall	.-3504   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      9e:	24 b2       	in	r2, 0x14	; 20
      a0:	76 5b       	subi	r23, 0xB6	; 182
      a2:	a2 49       	sbci	r26, 0x92	; 146
      a4:	6d 8b       	std	Y+21, r22	; 0x15
      a6:	d1 25       	eor	r29, r1
      a8:	72 f8       	bld	r7, 2
      aa:	f6 64       	ori	r31, 0x46	; 70
      ac:	86 68       	ori	r24, 0x86	; 134
      ae:	98 16       	cp	r9, r24
      b0:	d4 a4       	ldd	r13, Z+44	; 0x2c
      b2:	5c cc       	rjmp	.-1864   	; 0xfffff96c <__eeprom_end+0xff7ef96c>
      b4:	5d 65       	ori	r21, 0x5D	; 93
      b6:	b6 92       	lac	Z, r11
      b8:	6c 70       	andi	r22, 0x0C	; 12
      ba:	48 50       	subi	r20, 0x08	; 8
      bc:	fd ed       	ldi	r31, 0xDD	; 221
      be:	b9 da       	rcall	.-2702   	; 0xfffff632 <__eeprom_end+0xff7ef632>
      c0:	5e 15       	cp	r21, r14
      c2:	46 57       	subi	r20, 0x76	; 118
      c4:	a7 8d       	ldd	r26, Z+31	; 0x1f
      c6:	9d 84       	ldd	r9, Y+13	; 0x0d
      c8:	90 d8       	rcall	.-3808   	; 0xfffff1ea <__eeprom_end+0xff7ef1ea>
      ca:	ab 00       	.word	0x00ab	; ????
      cc:	8c bc       	out	0x2c, r8	; 44
      ce:	d3 0a       	sbc	r13, r19
      d0:	f7 e4       	ldi	r31, 0x47	; 71
      d2:	58 05       	cpc	r21, r8
      d4:	b8 b3       	in	r27, 0x18	; 24
      d6:	45 06       	cpc	r4, r21
      d8:	d0 2c       	mov	r13, r0
      da:	1e 8f       	std	Y+30, r17	; 0x1e
      dc:	ca 3f       	cpi	r28, 0xFA	; 250
      de:	0f 02       	muls	r16, r31
      e0:	c1 af       	std	Z+57, r28	; 0x39
      e2:	bd 03       	fmulsu	r19, r21
      e4:	01 13       	cpse	r16, r17
      e6:	8a 6b       	ori	r24, 0xBA	; 186
      e8:	3a 91       	ld	r19, -Y
      ea:	11 41       	sbci	r17, 0x11	; 17
      ec:	4f 67       	ori	r20, 0x7F	; 127
      ee:	dc ea       	ldi	r29, 0xAC	; 172
      f0:	97 f2       	brie	.-92     	; 0x96 <__trampolines_end+0x2e>
      f2:	cf ce       	rjmp	.-610    	; 0xfffffe92 <__eeprom_end+0xff7efe92>
      f4:	f0 b4       	in	r15, 0x20	; 32
      f6:	e6 73       	andi	r30, 0x36	; 54
      f8:	96 ac       	ldd	r9, Z+62	; 0x3e
      fa:	74 22       	and	r7, r20
      fc:	e7 ad       	ldd	r30, Z+63	; 0x3f
      fe:	35 85       	ldd	r19, Z+13	; 0x0d
     100:	e2 f9       	bld	r30, 2
     102:	37 e8       	ldi	r19, 0x87	; 135
     104:	1c 75       	andi	r17, 0x5C	; 92
     106:	df 6e       	ori	r29, 0xEF	; 239
     108:	47 f1       	brie	.+80     	; 0x15a <__trampolines_end+0xf2>
     10a:	1a 71       	andi	r17, 0x1A	; 26
     10c:	1d 29       	or	r17, r13
     10e:	c5 89       	ldd	r28, Z+21	; 0x15
     110:	6f b7       	in	r22, 0x3f	; 63
     112:	62 0e       	add	r6, r18
     114:	aa 18       	sub	r10, r10
     116:	be 1b       	sub	r27, r30
     118:	fc 56       	subi	r31, 0x6C	; 108
     11a:	3e 4b       	sbci	r19, 0xBE	; 190
     11c:	c6 d2       	rcall	.+1420   	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     11e:	79 20       	and	r7, r9
     120:	9a db       	rcall	.-2252   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     122:	c0 fe       	sbrs	r12, 0
     124:	78 cd       	rjmp	.-1296   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
     126:	5a f4       	brpl	.+22     	; 0x13e <__trampolines_end+0xd6>
     128:	1f dd       	rcall	.-1474   	; 0xfffffb68 <__eeprom_end+0xff7efb68>
     12a:	a8 33       	cpi	r26, 0x38	; 56
     12c:	88 07       	cpc	r24, r24
     12e:	c7 31       	cpi	r28, 0x17	; 23
     130:	b1 12       	cpse	r11, r17
     132:	10 59       	subi	r17, 0x90	; 144
     134:	27 80       	ldd	r2, Z+7	; 0x07
     136:	ec 5f       	subi	r30, 0xFC	; 252
     138:	60 51       	subi	r22, 0x10	; 16
     13a:	7f a9       	ldd	r23, Y+55	; 0x37
     13c:	19 b5       	in	r17, 0x29	; 41
     13e:	4a 0d       	add	r20, r10
     140:	2d e5       	ldi	r18, 0x5D	; 93
     142:	7a 9f       	mul	r23, r26
     144:	93 c9       	rjmp	.-3290   	; 0xfffff46c <__eeprom_end+0xff7ef46c>
     146:	9c ef       	ldi	r25, 0xFC	; 252
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	3b 4d       	sbci	r19, 0xDB	; 219
     14c:	ae 2a       	or	r10, r30
     14e:	f5 b0       	in	r15, 0x05	; 5
     150:	c8 eb       	ldi	r28, 0xB8	; 184
     152:	bb 3c       	cpi	r27, 0xCB	; 203
     154:	83 53       	subi	r24, 0x33	; 51
     156:	99 61       	ori	r25, 0x19	; 25
     158:	17 2b       	or	r17, r23
     15a:	04 7e       	andi	r16, 0xE4	; 228
     15c:	ba 77       	andi	r27, 0x7A	; 122
     15e:	d6 26       	eor	r13, r22
     160:	e1 69       	ori	r30, 0x91	; 145
     162:	14 63       	ori	r17, 0x34	; 52
     164:	55 21       	and	r21, r5
     166:	0c 7d       	andi	r16, 0xDC	; 220

00000168 <SBOX>:
     168:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     178:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     188:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     198:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     1a8:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     1b8:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     1c8:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     1d8:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     1e8:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     1f8:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     208:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     218:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     228:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     238:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     248:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     258:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000268 <RC>:
     268:	01 02 04 08 10 20 40 80 1b 36                       ..... @..6

00000272 <__ctors_end>:
     272:	11 24       	eor	r1, r1
     274:	1f be       	out	0x3f, r1	; 63
     276:	cf ef       	ldi	r28, 0xFF	; 255
     278:	d8 e0       	ldi	r29, 0x08	; 8
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	cd bf       	out	0x3d, r28	; 61

0000027e <__do_copy_data>:
     27e:	11 e0       	ldi	r17, 0x01	; 1
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b1 e0       	ldi	r27, 0x01	; 1
     284:	e6 eb       	ldi	r30, 0xB6	; 182
     286:	f3 e1       	ldi	r31, 0x13	; 19
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x10>
     28a:	05 90       	lpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	a0 33       	cpi	r26, 0x30	; 48
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0xc>
     294:	0e 94 3b 09 	call	0x1276	; 0x1276 <main>
     298:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_exit>

0000029c <__bad_interrupt>:
     29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	1f 92       	push	r1
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	88 23       	and	r24, r24
     2b0:	4c f4       	brge	.+18     	; 0x2c4 <mul2+0x24>
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	98 2f       	mov	r25, r24
     2be:	8b e1       	ldi	r24, 0x1B	; 27
     2c0:	89 27       	eor	r24, r25
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <mul2+0x28>
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 0f       	add	r24, r24
}
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(uint8_t *state) {
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <inv_shift_rows+0x6>
     2d6:	1f 92       	push	r1
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	9b 83       	std	Y+3, r25	; 0x03
     2de:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	9b 81       	ldd	r25, Y+3	; 0x03
     2e4:	fc 01       	movw	r30, r24
     2e6:	85 85       	ldd	r24, Z+13	; 0x0d
     2e8:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	0d 96       	adiw	r24, 0x0d	; 13
     2f0:	2a 81       	ldd	r18, Y+2	; 0x02
     2f2:	3b 81       	ldd	r19, Y+3	; 0x03
     2f4:	f9 01       	movw	r30, r18
     2f6:	21 85       	ldd	r18, Z+9	; 0x09
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	09 96       	adiw	r24, 0x09	; 9
     302:	2a 81       	ldd	r18, Y+2	; 0x02
     304:	3b 81       	ldd	r19, Y+3	; 0x03
     306:	f9 01       	movw	r30, r18
     308:	25 81       	ldd	r18, Z+5	; 0x05
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	9b 81       	ldd	r25, Y+3	; 0x03
     312:	05 96       	adiw	r24, 0x05	; 5
     314:	2a 81       	ldd	r18, Y+2	; 0x02
     316:	3b 81       	ldd	r19, Y+3	; 0x03
     318:	f9 01       	movw	r30, r18
     31a:	21 81       	ldd	r18, Z+1	; 0x01
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
    *(state+1)  = temp;
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	29 81       	ldd	r18, Y+1	; 0x01
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	fc 01       	movw	r30, r24
     332:	86 85       	ldd	r24, Z+14	; 0x0e
     334:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	9b 81       	ldd	r25, Y+3	; 0x03
     33a:	0e 96       	adiw	r24, 0x0e	; 14
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	26 81       	ldd	r18, Z+6	; 0x06
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
    *(state+6)  = temp;
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	9b 81       	ldd	r25, Y+3	; 0x03
     34c:	06 96       	adiw	r24, 0x06	; 6
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
    temp        = *(state+10);
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	fc 01       	movw	r30, r24
     35a:	82 85       	ldd	r24, Z+10	; 0x0a
     35c:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	9b 81       	ldd	r25, Y+3	; 0x03
     362:	0a 96       	adiw	r24, 0x0a	; 10
     364:	2a 81       	ldd	r18, Y+2	; 0x02
     366:	3b 81       	ldd	r19, Y+3	; 0x03
     368:	f9 01       	movw	r30, r18
     36a:	22 81       	ldd	r18, Z+2	; 0x02
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
    *(state+2)  = temp;
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	02 96       	adiw	r24, 0x02	; 2
     376:	29 81       	ldd	r18, Y+1	; 0x01
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	fc 01       	movw	r30, r24
     382:	83 81       	ldd	r24, Z+3	; 0x03
     384:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	9b 81       	ldd	r25, Y+3	; 0x03
     38a:	03 96       	adiw	r24, 0x03	; 3
     38c:	2a 81       	ldd	r18, Y+2	; 0x02
     38e:	3b 81       	ldd	r19, Y+3	; 0x03
     390:	f9 01       	movw	r30, r18
     392:	27 81       	ldd	r18, Z+7	; 0x07
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	07 96       	adiw	r24, 0x07	; 7
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	f9 01       	movw	r30, r18
     3a4:	23 85       	ldd	r18, Z+11	; 0x0b
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	0b 96       	adiw	r24, 0x0b	; 11
     3b0:	2a 81       	ldd	r18, Y+2	; 0x02
     3b2:	3b 81       	ldd	r19, Y+3	; 0x03
     3b4:	f9 01       	movw	r30, r18
     3b6:	27 85       	ldd	r18, Z+15	; 0x0f
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
    *(state+15) = temp;
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	9b 81       	ldd	r25, Y+3	; 0x03
     3c0:	0f 96       	adiw	r24, 0x0f	; 15
     3c2:	29 81       	ldd	r18, Y+1	; 0x01
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
	
}
     3c8:	00 00       	nop
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <aes_decrypt_128>:
void aes_decrypt_128(uint8_t *roundkeys,uint8_t *ciphertext, uint8_t *plaintext) {
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	a1 97       	sbiw	r28, 0x21	; 33
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	9d 8f       	std	Y+29, r25	; 0x1d
     3f2:	8c 8f       	std	Y+28, r24	; 0x1c
     3f4:	7f 8f       	std	Y+31, r23	; 0x1f
     3f6:	6e 8f       	std	Y+30, r22	; 0x1e
     3f8:	59 a3       	std	Y+33, r21	; 0x21
     3fa:	48 a3       	std	Y+32, r20	; 0x20

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     3fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
     400:	80 56       	subi	r24, 0x60	; 96
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	9d 8f       	std	Y+29, r25	; 0x1d
     406:	8c 8f       	std	Y+28, r24	; 0x1c

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     408:	19 82       	std	Y+1, r1	; 0x01
     40a:	1f c0       	rjmp	.+62     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	28 a1       	ldd	r18, Y+32	; 0x20
     414:	39 a1       	ldd	r19, Y+33	; 0x21
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	22 2f       	mov	r18, r18
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4e 8d       	ldd	r20, Y+30	; 0x1e
     422:	5f 8d       	ldd	r21, Y+31	; 0x1f
     424:	24 0f       	add	r18, r20
     426:	35 1f       	adc	r19, r21
     428:	f9 01       	movw	r30, r18
     42a:	60 81       	ld	r22, Z
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	22 2f       	mov	r18, r18
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4c 8d       	ldd	r20, Y+28	; 0x1c
     434:	5d 8d       	ldd	r21, Y+29	; 0x1d
     436:	24 0f       	add	r18, r20
     438:	35 1f       	adc	r19, r21
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	26 27       	eor	r18, r22
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	f0 f2       	brcs	.-68     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
     450:	8c 8d       	ldd	r24, Y+28	; 0x1c
     452:	9d 8d       	ldd	r25, Y+29	; 0x1d
     454:	40 97       	sbiw	r24, 0x10	; 16
     456:	9d 8f       	std	Y+29, r25	; 0x1d
     458:	8c 8f       	std	Y+28, r24	; 0x1c
    inv_shift_rows(plaintext);
     45a:	88 a1       	ldd	r24, Y+32	; 0x20
     45c:	99 a1       	ldd	r25, Y+33	; 0x21
     45e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     462:	19 82       	std	Y+1, r1	; 0x01
     464:	21 c0       	rjmp	.+66     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
        *(plaintext+i) = pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	28 a1       	ldd	r18, Y+32	; 0x20
     46e:	39 a1       	ldd	r19, Y+33	; 0x21
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	22 2f       	mov	r18, r18
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	48 a1       	ldd	r20, Y+32	; 0x20
     47c:	59 a1       	ldd	r21, Y+33	; 0x21
     47e:	24 0f       	add	r18, r20
     480:	35 1f       	adc	r19, r21
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	22 2f       	mov	r18, r18
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	28 59       	subi	r18, 0x98	; 152
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	3c 83       	std	Y+4, r19	; 0x04
     490:	2b 83       	std	Y+3, r18	; 0x03
     492:	2b 81       	ldd	r18, Y+3	; 0x03
     494:	3c 81       	ldd	r19, Y+4	; 0x04
     496:	f9 01       	movw	r30, r18
     498:	24 91       	lpm	r18, Z
     49a:	2d 83       	std	Y+5, r18	; 0x05
     49c:	2d 81       	ldd	r18, Y+5	; 0x05
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	80 31       	cpi	r24, 0x10	; 16
     4ac:	e0 f2       	brcs	.-72     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
        *(plaintext+i) = pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	8a 83       	std	Y+2, r24	; 0x02
     4b2:	f5 c1       	rjmp	.+1002   	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
        
							// Inverse AddRoundKey
							for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	20 c0       	rjmp	.+64     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
								*(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9e 01       	movw	r18, r28
     4c0:	24 5f       	subi	r18, 0xF4	; 244
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	82 0f       	add	r24, r18
     4c6:	93 1f       	adc	r25, r19
     4c8:	29 81       	ldd	r18, Y+1	; 0x01
     4ca:	22 2f       	mov	r18, r18
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	48 a1       	ldd	r20, Y+32	; 0x20
     4d0:	59 a1       	ldd	r21, Y+33	; 0x21
     4d2:	24 0f       	add	r18, r20
     4d4:	35 1f       	adc	r19, r21
     4d6:	f9 01       	movw	r30, r18
     4d8:	60 81       	ld	r22, Z
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	22 2f       	mov	r18, r18
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4e2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     4e4:	24 0f       	add	r18, r20
     4e6:	35 1f       	adc	r19, r21
     4e8:	f9 01       	movw	r30, r18
     4ea:	20 81       	ld	r18, Z
     4ec:	26 27       	eor	r18, r22
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
							// Inverse AddRoundKey
							for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	80 31       	cpi	r24, 0x10	; 16
     4fc:	e8 f2       	brcs	.-70     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
							 * [0e 0b 0d 09]   [s0  s4  s8  s12]
							 * [09 0e 0b 0d] . [s1  s5  s9  s13]
							 * [0d 09 0e 0b]   [s2  s6  s10 s14]
							 * [0b 0d 09 0e]   [s3  s7  s11 s15]
							 */
							for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	98 c1       	rjmp	.+816    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
								t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9e 01       	movw	r18, r28
     50a:	24 5f       	subi	r18, 0xF4	; 244
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	fc 01       	movw	r30, r24
     514:	40 81       	ld	r20, Z
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	9e 01       	movw	r18, r28
     520:	24 5f       	subi	r18, 0xF4	; 244
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	48 27       	eor	r20, r24
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 96       	adiw	r24, 0x02	; 2
     536:	9e 01       	movw	r18, r28
     538:	24 5f       	subi	r18, 0xF4	; 244
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	48 27       	eor	r20, r24
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	03 96       	adiw	r24, 0x03	; 3
     54e:	9e 01       	movw	r18, r28
     550:	24 5f       	subi	r18, 0xF4	; 244
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	84 27       	eor	r24, r20
     55e:	8e 83       	std	Y+6, r24	; 0x06
								plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	88 2f       	mov	r24, r24
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	28 a1       	ldd	r18, Y+32	; 0x20
     568:	39 a1       	ldd	r19, Y+33	; 0x21
     56a:	89 01       	movw	r16, r18
     56c:	08 0f       	add	r16, r24
     56e:	19 1f       	adc	r17, r25
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9e 01       	movw	r18, r28
     578:	24 5f       	subi	r18, 0xF4	; 244
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	82 0f       	add	r24, r18
     57e:	93 1f       	adc	r25, r19
     580:	fc 01       	movw	r30, r24
     582:	90 81       	ld	r25, Z
     584:	8e 81       	ldd	r24, Y+6	; 0x06
     586:	f9 2e       	mov	r15, r25
     588:	f8 26       	eor	r15, r24
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9e 01       	movw	r18, r28
     592:	24 5f       	subi	r18, 0xF4	; 244
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	fc 01       	movw	r30, r24
     59c:	40 81       	ld	r20, Z
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	9e 01       	movw	r18, r28
     5a8:	24 5f       	subi	r18, 0xF4	; 244
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	84 27       	eor	r24, r20
     5b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     5ba:	8f 25       	eor	r24, r15
     5bc:	f8 01       	movw	r30, r16
     5be:	80 83       	st	Z, r24
								plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	28 a1       	ldd	r18, Y+32	; 0x20
     5ca:	39 a1       	ldd	r19, Y+33	; 0x21
     5cc:	89 01       	movw	r16, r18
     5ce:	08 0f       	add	r16, r24
     5d0:	19 1f       	adc	r17, r25
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	9e 01       	movw	r18, r28
     5dc:	24 5f       	subi	r18, 0xF4	; 244
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	82 0f       	add	r24, r18
     5e2:	93 1f       	adc	r25, r19
     5e4:	fc 01       	movw	r30, r24
     5e6:	90 81       	ld	r25, Z
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	f9 2e       	mov	r15, r25
     5ec:	f8 26       	eor	r15, r24
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	9e 01       	movw	r18, r28
     5f8:	24 5f       	subi	r18, 0xF4	; 244
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
     600:	fc 01       	movw	r30, r24
     602:	40 81       	ld	r20, Z
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	88 2f       	mov	r24, r24
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	02 96       	adiw	r24, 0x02	; 2
     60c:	9e 01       	movw	r18, r28
     60e:	24 5f       	subi	r18, 0xF4	; 244
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	84 27       	eor	r24, r20
     61c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     620:	8f 25       	eor	r24, r15
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
								plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 96       	adiw	r24, 0x02	; 2
     62e:	28 a1       	ldd	r18, Y+32	; 0x20
     630:	39 a1       	ldd	r19, Y+33	; 0x21
     632:	89 01       	movw	r16, r18
     634:	08 0f       	add	r16, r24
     636:	19 1f       	adc	r17, r25
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	88 2f       	mov	r24, r24
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 96       	adiw	r24, 0x02	; 2
     640:	9e 01       	movw	r18, r28
     642:	24 5f       	subi	r18, 0xF4	; 244
     644:	3f 4f       	sbci	r19, 0xFF	; 255
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	fc 01       	movw	r30, r24
     64c:	90 81       	ld	r25, Z
     64e:	8e 81       	ldd	r24, Y+6	; 0x06
     650:	f9 2e       	mov	r15, r25
     652:	f8 26       	eor	r15, r24
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 96       	adiw	r24, 0x02	; 2
     65c:	9e 01       	movw	r18, r28
     65e:	24 5f       	subi	r18, 0xF4	; 244
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	fc 01       	movw	r30, r24
     668:	40 81       	ld	r20, Z
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	03 96       	adiw	r24, 0x03	; 3
     672:	9e 01       	movw	r18, r28
     674:	24 5f       	subi	r18, 0xF4	; 244
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	84 27       	eor	r24, r20
     682:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     686:	8f 25       	eor	r24, r15
     688:	f8 01       	movw	r30, r16
     68a:	80 83       	st	Z, r24
								plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	03 96       	adiw	r24, 0x03	; 3
     694:	28 a1       	ldd	r18, Y+32	; 0x20
     696:	39 a1       	ldd	r19, Y+33	; 0x21
     698:	89 01       	movw	r16, r18
     69a:	08 0f       	add	r16, r24
     69c:	19 1f       	adc	r17, r25
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	03 96       	adiw	r24, 0x03	; 3
     6a6:	9e 01       	movw	r18, r28
     6a8:	24 5f       	subi	r18, 0xF4	; 244
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	fc 01       	movw	r30, r24
     6b2:	90 81       	ld	r25, Z
     6b4:	8e 81       	ldd	r24, Y+6	; 0x06
     6b6:	f9 2e       	mov	r15, r25
     6b8:	f8 26       	eor	r15, r24
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	03 96       	adiw	r24, 0x03	; 3
     6c2:	9e 01       	movw	r18, r28
     6c4:	24 5f       	subi	r18, 0xF4	; 244
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	fc 01       	movw	r30, r24
     6ce:	40 81       	ld	r20, Z
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	88 2f       	mov	r24, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9e 01       	movw	r18, r28
     6d8:	24 5f       	subi	r18, 0xF4	; 244
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	82 0f       	add	r24, r18
     6de:	93 1f       	adc	r25, r19
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	84 27       	eor	r24, r20
     6e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     6ea:	8f 25       	eor	r24, r15
     6ec:	f8 01       	movw	r30, r16
     6ee:	80 83       	st	Z, r24
								u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9e 01       	movw	r18, r28
     6f8:	24 5f       	subi	r18, 0xF4	; 244
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	fc 01       	movw	r30, r24
     702:	40 81       	ld	r20, Z
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 96       	adiw	r24, 0x02	; 2
     70c:	9e 01       	movw	r18, r28
     70e:	24 5f       	subi	r18, 0xF4	; 244
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	84 27       	eor	r24, r20
     71c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     720:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     724:	8f 83       	std	Y+7, r24	; 0x07
								v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	9e 01       	movw	r18, r28
     730:	24 5f       	subi	r18, 0xF4	; 244
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	fc 01       	movw	r30, r24
     73a:	40 81       	ld	r20, Z
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	03 96       	adiw	r24, 0x03	; 3
     744:	9e 01       	movw	r18, r28
     746:	24 5f       	subi	r18, 0xF4	; 244
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	82 0f       	add	r24, r18
     74c:	93 1f       	adc	r25, r19
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	84 27       	eor	r24, r20
     754:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     758:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     75c:	88 87       	std	Y+8, r24	; 0x08
								t = mul2(u ^ v);
     75e:	9f 81       	ldd	r25, Y+7	; 0x07
     760:	88 85       	ldd	r24, Y+8	; 0x08
     762:	89 27       	eor	r24, r25
     764:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     768:	8e 83       	std	Y+6, r24	; 0x06
								plaintext[i]   ^= t ^ u;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	28 a1       	ldd	r18, Y+32	; 0x20
     772:	39 a1       	ldd	r19, Y+33	; 0x21
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	29 81       	ldd	r18, Y+1	; 0x01
     77a:	22 2f       	mov	r18, r18
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	48 a1       	ldd	r20, Y+32	; 0x20
     780:	59 a1       	ldd	r21, Y+33	; 0x21
     782:	24 0f       	add	r18, r20
     784:	35 1f       	adc	r19, r21
     786:	f9 01       	movw	r30, r18
     788:	30 81       	ld	r19, Z
     78a:	4e 81       	ldd	r20, Y+6	; 0x06
     78c:	2f 81       	ldd	r18, Y+7	; 0x07
     78e:	24 27       	eor	r18, r20
     790:	23 27       	eor	r18, r19
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
								plaintext[i+1] ^= t ^ v;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	28 a1       	ldd	r18, Y+32	; 0x20
     7a0:	39 a1       	ldd	r19, Y+33	; 0x21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	48 a1       	ldd	r20, Y+32	; 0x20
     7b2:	59 a1       	ldd	r21, Y+33	; 0x21
     7b4:	24 0f       	add	r18, r20
     7b6:	35 1f       	adc	r19, r21
     7b8:	f9 01       	movw	r30, r18
     7ba:	30 81       	ld	r19, Z
     7bc:	4e 81       	ldd	r20, Y+6	; 0x06
     7be:	28 85       	ldd	r18, Y+8	; 0x08
     7c0:	24 27       	eor	r18, r20
     7c2:	23 27       	eor	r18, r19
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
								plaintext[i+2] ^= t ^ u;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 96       	adiw	r24, 0x02	; 2
     7d0:	28 a1       	ldd	r18, Y+32	; 0x20
     7d2:	39 a1       	ldd	r19, Y+33	; 0x21
     7d4:	82 0f       	add	r24, r18
     7d6:	93 1f       	adc	r25, r19
     7d8:	29 81       	ldd	r18, Y+1	; 0x01
     7da:	22 2f       	mov	r18, r18
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	2e 5f       	subi	r18, 0xFE	; 254
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	48 a1       	ldd	r20, Y+32	; 0x20
     7e4:	59 a1       	ldd	r21, Y+33	; 0x21
     7e6:	24 0f       	add	r18, r20
     7e8:	35 1f       	adc	r19, r21
     7ea:	f9 01       	movw	r30, r18
     7ec:	30 81       	ld	r19, Z
     7ee:	4e 81       	ldd	r20, Y+6	; 0x06
     7f0:	2f 81       	ldd	r18, Y+7	; 0x07
     7f2:	24 27       	eor	r18, r20
     7f4:	23 27       	eor	r18, r19
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
								plaintext[i+3] ^= t ^ v;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	03 96       	adiw	r24, 0x03	; 3
     802:	28 a1       	ldd	r18, Y+32	; 0x20
     804:	39 a1       	ldd	r19, Y+33	; 0x21
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	22 2f       	mov	r18, r18
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	2d 5f       	subi	r18, 0xFD	; 253
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	48 a1       	ldd	r20, Y+32	; 0x20
     816:	59 a1       	ldd	r21, Y+33	; 0x21
     818:	24 0f       	add	r18, r20
     81a:	35 1f       	adc	r19, r21
     81c:	f9 01       	movw	r30, r18
     81e:	30 81       	ld	r19, Z
     820:	4e 81       	ldd	r20, Y+6	; 0x06
     822:	28 85       	ldd	r18, Y+8	; 0x08
     824:	24 27       	eor	r18, r20
     826:	23 27       	eor	r18, r19
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
							 * [0e 0b 0d 09]   [s0  s4  s8  s12]
							 * [09 0e 0b 0d] . [s1  s5  s9  s13]
							 * [0d 09 0e 0b]   [s2  s6  s10 s14]
							 * [0b 0d 09 0e]   [s3  s7  s11 s15]
							 */
							for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	8c 5f       	subi	r24, 0xFC	; 252
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	80 31       	cpi	r24, 0x10	; 16
     836:	08 f4       	brcc	.+2      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     838:	64 ce       	rjmp	.-824    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
								plaintext[i+2] ^= t ^ u;
								plaintext[i+3] ^= t ^ v;
							}
        
							// Inverse ShiftRows
							inv_shift_rows(plaintext);
     83a:	88 a1       	ldd	r24, Y+32	; 0x20
     83c:	99 a1       	ldd	r25, Y+33	; 0x21
     83e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <inv_shift_rows>
        
							// Inverse SubBytes
							for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     842:	19 82       	std	Y+1, r1	; 0x01
     844:	21 c0       	rjmp	.+66     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
								*(plaintext+i) = pgm_read_byte( &INV_SBOX[*(plaintext+i)] );
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	28 a1       	ldd	r18, Y+32	; 0x20
     84e:	39 a1       	ldd	r19, Y+33	; 0x21
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	22 2f       	mov	r18, r18
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	48 a1       	ldd	r20, Y+32	; 0x20
     85c:	59 a1       	ldd	r21, Y+33	; 0x21
     85e:	24 0f       	add	r18, r20
     860:	35 1f       	adc	r19, r21
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	22 2f       	mov	r18, r18
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	28 59       	subi	r18, 0x98	; 152
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	3a 87       	std	Y+10, r19	; 0x0a
     870:	29 87       	std	Y+9, r18	; 0x09
     872:	29 85       	ldd	r18, Y+9	; 0x09
     874:	3a 85       	ldd	r19, Y+10	; 0x0a
     876:	f9 01       	movw	r30, r18
     878:	24 91       	lpm	r18, Z
     87a:	2b 87       	std	Y+11, r18	; 0x0b
     87c:	2b 85       	ldd	r18, Y+11	; 0x0b
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
        
							// Inverse ShiftRows
							inv_shift_rows(plaintext);
        
							// Inverse SubBytes
							for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	80 31       	cpi	r24, 0x10	; 16
     88c:	e0 f2       	brcs	.-72     	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
								*(plaintext+i) = pgm_read_byte( &INV_SBOX[*(plaintext+i)] );
							}

							roundkeys -= 16;
     88e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     890:	9d 8d       	ldd	r25, Y+29	; 0x1d
     892:	40 97       	sbiw	r24, 0x10	; 16
     894:	9d 8f       	std	Y+29, r25	; 0x1d
     896:	8c 8f       	std	Y+28, r24	; 0x1c
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	8a 30       	cpi	r24, 0x0A	; 10
     8a2:	08 f4       	brcc	.+2      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     8a4:	07 ce       	rjmp	.-1010   	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
							roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     8a6:	19 82       	std	Y+1, r1	; 0x01
     8a8:	1f c0       	rjmp	.+62     	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
        *(plaintext+i) ^= *(roundkeys+i);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	28 a1       	ldd	r18, Y+32	; 0x20
     8b2:	39 a1       	ldd	r19, Y+33	; 0x21
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	29 81       	ldd	r18, Y+1	; 0x01
     8ba:	22 2f       	mov	r18, r18
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	48 a1       	ldd	r20, Y+32	; 0x20
     8c0:	59 a1       	ldd	r21, Y+33	; 0x21
     8c2:	24 0f       	add	r18, r20
     8c4:	35 1f       	adc	r19, r21
     8c6:	f9 01       	movw	r30, r18
     8c8:	60 81       	ld	r22, Z
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	22 2f       	mov	r18, r18
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8d2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8d4:	24 0f       	add	r18, r20
     8d6:	35 1f       	adc	r19, r21
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	26 27       	eor	r18, r22
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
							roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	80 31       	cpi	r24, 0x10	; 16
     8ec:	f0 f2       	brcs	.-68     	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
        *(plaintext+i) ^= *(roundkeys+i);
    }

     8ee:	00 00       	nop
     8f0:	a1 96       	adiw	r28, 0x21	; 33
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	08 95       	ret

00000908 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	88 23       	and	r24, r24
     918:	4c f4       	brge	.+18     	; 0x92c <mul2+0x24>
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	98 2f       	mov	r25, r24
     926:	8b e1       	ldi	r24, 0x1B	; 27
     928:	89 27       	eor	r24, r25
     92a:	02 c0       	rjmp	.+4      	; 0x930 <mul2+0x28>
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	88 0f       	add	r24, r24
}
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	00 d0       	rcall	.+0      	; 0x93e <shift_rows+0x6>
     93e:	1f 92       	push	r1
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	9b 83       	std	Y+3, r25	; 0x03
     946:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	9b 81       	ldd	r25, Y+3	; 0x03
     94c:	fc 01       	movw	r30, r24
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	2a 81       	ldd	r18, Y+2	; 0x02
     95a:	3b 81       	ldd	r19, Y+3	; 0x03
     95c:	f9 01       	movw	r30, r18
     95e:	25 81       	ldd	r18, Z+5	; 0x05
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     964:	8a 81       	ldd	r24, Y+2	; 0x02
     966:	9b 81       	ldd	r25, Y+3	; 0x03
     968:	05 96       	adiw	r24, 0x05	; 5
     96a:	2a 81       	ldd	r18, Y+2	; 0x02
     96c:	3b 81       	ldd	r19, Y+3	; 0x03
     96e:	f9 01       	movw	r30, r18
     970:	21 85       	ldd	r18, Z+9	; 0x09
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	09 96       	adiw	r24, 0x09	; 9
     97c:	2a 81       	ldd	r18, Y+2	; 0x02
     97e:	3b 81       	ldd	r19, Y+3	; 0x03
     980:	f9 01       	movw	r30, r18
     982:	25 85       	ldd	r18, Z+13	; 0x0d
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
    *(state+13) = temp;
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	9b 81       	ldd	r25, Y+3	; 0x03
     98c:	0d 96       	adiw	r24, 0x0d	; 13
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	9b 81       	ldd	r25, Y+3	; 0x03
     998:	fc 01       	movw	r30, r24
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	02 96       	adiw	r24, 0x02	; 2
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	3b 81       	ldd	r19, Y+3	; 0x03
     9a8:	f9 01       	movw	r30, r18
     9aa:	22 85       	ldd	r18, Z+10	; 0x0a
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
    *(state+10) = temp;
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	9b 81       	ldd	r25, Y+3	; 0x03
     9b4:	0a 96       	adiw	r24, 0x0a	; 10
     9b6:	29 81       	ldd	r18, Y+1	; 0x01
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
    temp        = *(state+6);
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	fc 01       	movw	r30, r24
     9c2:	86 81       	ldd	r24, Z+6	; 0x06
     9c4:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	06 96       	adiw	r24, 0x06	; 6
     9cc:	2a 81       	ldd	r18, Y+2	; 0x02
     9ce:	3b 81       	ldd	r19, Y+3	; 0x03
     9d0:	f9 01       	movw	r30, r18
     9d2:	26 85       	ldd	r18, Z+14	; 0x0e
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
    *(state+14) = temp;
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	0e 96       	adiw	r24, 0x0e	; 14
     9de:	29 81       	ldd	r18, Y+1	; 0x01
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	fc 01       	movw	r30, r24
     9ea:	87 85       	ldd	r24, Z+15	; 0x0f
     9ec:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	0f 96       	adiw	r24, 0x0f	; 15
     9f4:	2a 81       	ldd	r18, Y+2	; 0x02
     9f6:	3b 81       	ldd	r19, Y+3	; 0x03
     9f8:	f9 01       	movw	r30, r18
     9fa:	23 85       	ldd	r18, Z+11	; 0x0b
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	9b 81       	ldd	r25, Y+3	; 0x03
     a04:	0b 96       	adiw	r24, 0x0b	; 11
     a06:	2a 81       	ldd	r18, Y+2	; 0x02
     a08:	3b 81       	ldd	r19, Y+3	; 0x03
     a0a:	f9 01       	movw	r30, r18
     a0c:	27 81       	ldd	r18, Z+7	; 0x07
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     a12:	8a 81       	ldd	r24, Y+2	; 0x02
     a14:	9b 81       	ldd	r25, Y+3	; 0x03
     a16:	07 96       	adiw	r24, 0x07	; 7
     a18:	2a 81       	ldd	r18, Y+2	; 0x02
     a1a:	3b 81       	ldd	r19, Y+3	; 0x03
     a1c:	f9 01       	movw	r30, r18
     a1e:	23 81       	ldd	r18, Z+3	; 0x03
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
    *(state+3)  = temp;
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	9b 81       	ldd	r25, Y+3	; 0x03
     a28:	03 96       	adiw	r24, 0x03	; 3
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 83       	st	Z, r18
}
     a30:	00 00       	nop
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <aes_encrypt_128>:

void aes_encrypt_128(uint8_t *roundkeys, uint8_t *plaintext, uint8_t *ciphertext) {
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	6f 97       	sbiw	r28, 0x1f	; 31
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	9b 8f       	std	Y+27, r25	; 0x1b
     a58:	8a 8f       	std	Y+26, r24	; 0x1a
     a5a:	7d 8f       	std	Y+29, r23	; 0x1d
     a5c:	6c 8f       	std	Y+28, r22	; 0x1c
     a5e:	5f 8f       	std	Y+31, r21	; 0x1f
     a60:	4e 8f       	std	Y+30, r20	; 0x1e

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     a62:	19 82       	std	Y+1, r1	; 0x01
     a64:	1f c0       	rjmp	.+62     	; 0xaa4 <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     a6e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a70:	28 0f       	add	r18, r24
     a72:	39 1f       	adc	r19, r25
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a7c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a7e:	84 0f       	add	r24, r20
     a80:	95 1f       	adc	r25, r21
     a82:	fc 01       	movw	r30, r24
     a84:	60 81       	ld	r22, Z
     a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a88:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a8a:	ac 01       	movw	r20, r24
     a8c:	4f 5f       	subi	r20, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	5b 8f       	std	Y+27, r21	; 0x1b
     a92:	4a 8f       	std	Y+26, r20	; 0x1a
     a94:	fc 01       	movw	r30, r24
     a96:	80 81       	ld	r24, Z
     a98:	86 27       	eor	r24, r22
     a9a:	f9 01       	movw	r30, r18
     a9c:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	80 31       	cpi	r24, 0x10	; 16
     aa8:	f0 f2       	brcs	.-68     	; 0xa66 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	8a 83       	std	Y+2, r24	; 0x02
     aae:	56 c1       	rjmp	.+684    	; 0xd5c <aes_encrypt_128+0x31e>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     ab0:	19 82       	std	Y+1, r1	; 0x01
     ab2:	22 c0       	rjmp	.+68     	; 0xaf8 <aes_encrypt_128+0xba>
            *(tmp+i) = pgm_read_byte (&SBOX[*(ciphertext+i)]);
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	9e 01       	movw	r18, r28
     abc:	26 5f       	subi	r18, 0xF6	; 246
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	29 81       	ldd	r18, Y+1	; 0x01
     ac6:	22 2f       	mov	r18, r18
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	4e 8d       	ldd	r20, Y+30	; 0x1e
     acc:	5f 8d       	ldd	r21, Y+31	; 0x1f
     ace:	24 0f       	add	r18, r20
     ad0:	35 1f       	adc	r19, r21
     ad2:	f9 01       	movw	r30, r18
     ad4:	20 81       	ld	r18, Z
     ad6:	22 2f       	mov	r18, r18
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	28 59       	subi	r18, 0x98	; 152
     adc:	3e 4f       	sbci	r19, 0xFE	; 254
     ade:	3c 83       	std	Y+4, r19	; 0x04
     ae0:	2b 83       	std	Y+3, r18	; 0x03
     ae2:	2b 81       	ldd	r18, Y+3	; 0x03
     ae4:	3c 81       	ldd	r19, Y+4	; 0x04
     ae6:	f9 01       	movw	r30, r18
     ae8:	24 91       	lpm	r18, Z
     aea:	2d 83       	std	Y+5, r18	; 0x05
     aec:	2d 81       	ldd	r18, Y+5	; 0x05
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	80 31       	cpi	r24, 0x10	; 16
     afc:	d8 f2       	brcs	.-74     	; 0xab4 <aes_encrypt_128+0x76>
            *(tmp+i) = pgm_read_byte (&SBOX[*(ciphertext+i)]);
        }
        shift_rows(tmp);
     afe:	ce 01       	movw	r24, r28
     b00:	0a 96       	adiw	r24, 0x0a	; 10
     b02:	0e 94 9c 04 	call	0x938	; 0x938 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
			for (i = 0; i < AES_BLOCK_SIZE; i+=4)  
     b06:	19 82       	std	Y+1, r1	; 0x01
     b08:	fe c0       	rjmp	.+508    	; 0xd06 <aes_encrypt_128+0x2c8>
			{//
				t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	9e 01       	movw	r18, r28
     b12:	26 5f       	subi	r18, 0xF6	; 246
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	fc 01       	movw	r30, r24
     b1c:	40 81       	ld	r20, Z
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	26 5f       	subi	r18, 0xF6	; 246
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	48 27       	eor	r20, r24
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	02 96       	adiw	r24, 0x02	; 2
     b3e:	9e 01       	movw	r18, r28
     b40:	26 5f       	subi	r18, 0xF6	; 246
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	82 0f       	add	r24, r18
     b46:	93 1f       	adc	r25, r19
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	48 27       	eor	r20, r24
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	03 96       	adiw	r24, 0x03	; 3
     b56:	9e 01       	movw	r18, r28
     b58:	26 5f       	subi	r18, 0xF6	; 246
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	82 0f       	add	r24, r18
     b5e:	93 1f       	adc	r25, r19
     b60:	fc 01       	movw	r30, r24
     b62:	80 81       	ld	r24, Z
     b64:	84 27       	eor	r24, r20
     b66:	8e 83       	std	Y+6, r24	; 0x06
				ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	2e 8d       	ldd	r18, Y+30	; 0x1e
     b70:	3f 8d       	ldd	r19, Y+31	; 0x1f
     b72:	89 01       	movw	r16, r18
     b74:	08 0f       	add	r16, r24
     b76:	19 1f       	adc	r17, r25
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9e 01       	movw	r18, r28
     b80:	26 5f       	subi	r18, 0xF6	; 246
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	fc 01       	movw	r30, r24
     b8a:	40 81       	ld	r20, Z
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	9e 01       	movw	r18, r28
     b96:	26 5f       	subi	r18, 0xF6	; 246
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 81       	ld	r24, Z
     ba2:	84 27       	eor	r24, r20
     ba4:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     ba8:	48 2f       	mov	r20, r24
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 01       	movw	r18, r28
     bb2:	26 5f       	subi	r18, 0xF6	; 246
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	94 2f       	mov	r25, r20
     bc0:	98 27       	eor	r25, r24
     bc2:	8e 81       	ldd	r24, Y+6	; 0x06
     bc4:	89 27       	eor	r24, r25
     bc6:	f8 01       	movw	r30, r16
     bc8:	80 83       	st	Z, r24
				ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bd4:	3f 8d       	ldd	r19, Y+31	; 0x1f
     bd6:	89 01       	movw	r16, r18
     bd8:	08 0f       	add	r16, r24
     bda:	19 1f       	adc	r17, r25
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	9e 01       	movw	r18, r28
     be6:	26 5f       	subi	r18, 0xF6	; 246
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	fc 01       	movw	r30, r24
     bf0:	40 81       	ld	r20, Z
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 96       	adiw	r24, 0x02	; 2
     bfa:	9e 01       	movw	r18, r28
     bfc:	26 5f       	subi	r18, 0xF6	; 246
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	fc 01       	movw	r30, r24
     c06:	80 81       	ld	r24, Z
     c08:	84 27       	eor	r24, r20
     c0a:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     c0e:	48 2f       	mov	r20, r24
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	9e 01       	movw	r18, r28
     c1a:	26 5f       	subi	r18, 0xF6	; 246
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	94 2f       	mov	r25, r20
     c28:	98 27       	eor	r25, r24
     c2a:	8e 81       	ldd	r24, Y+6	; 0x06
     c2c:	89 27       	eor	r24, r25
     c2e:	f8 01       	movw	r30, r16
     c30:	80 83       	st	Z, r24
				ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 96       	adiw	r24, 0x02	; 2
     c3a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c3c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c3e:	89 01       	movw	r16, r18
     c40:	08 0f       	add	r16, r24
     c42:	19 1f       	adc	r17, r25
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 96       	adiw	r24, 0x02	; 2
     c4c:	9e 01       	movw	r18, r28
     c4e:	26 5f       	subi	r18, 0xF6	; 246
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	82 0f       	add	r24, r18
     c54:	93 1f       	adc	r25, r19
     c56:	fc 01       	movw	r30, r24
     c58:	40 81       	ld	r20, Z
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	03 96       	adiw	r24, 0x03	; 3
     c62:	9e 01       	movw	r18, r28
     c64:	26 5f       	subi	r18, 0xF6	; 246
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	84 27       	eor	r24, r20
     c72:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     c76:	48 2f       	mov	r20, r24
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 96       	adiw	r24, 0x02	; 2
     c80:	9e 01       	movw	r18, r28
     c82:	26 5f       	subi	r18, 0xF6	; 246
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	82 0f       	add	r24, r18
     c88:	93 1f       	adc	r25, r19
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	94 2f       	mov	r25, r20
     c90:	98 27       	eor	r25, r24
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	89 27       	eor	r24, r25
     c96:	f8 01       	movw	r30, r16
     c98:	80 83       	st	Z, r24
				ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	03 96       	adiw	r24, 0x03	; 3
     ca2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ca4:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ca6:	89 01       	movw	r16, r18
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	03 96       	adiw	r24, 0x03	; 3
     cb4:	9e 01       	movw	r18, r28
     cb6:	26 5f       	subi	r18, 0xF6	; 246
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	82 0f       	add	r24, r18
     cbc:	93 1f       	adc	r25, r19
     cbe:	fc 01       	movw	r30, r24
     cc0:	40 81       	ld	r20, Z
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9e 01       	movw	r18, r28
     cca:	26 5f       	subi	r18, 0xF6	; 246
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	84 27       	eor	r24, r20
     cd8:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     cdc:	48 2f       	mov	r20, r24
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	03 96       	adiw	r24, 0x03	; 3
     ce6:	9e 01       	movw	r18, r28
     ce8:	26 5f       	subi	r18, 0xF6	; 246
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	82 0f       	add	r24, r18
     cee:	93 1f       	adc	r25, r19
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	94 2f       	mov	r25, r20
     cf6:	98 27       	eor	r25, r24
     cf8:	8e 81       	ldd	r24, Y+6	; 0x06
     cfa:	89 27       	eor	r24, r25
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
			for (i = 0; i < AES_BLOCK_SIZE; i+=4)  
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	8c 5f       	subi	r24, 0xFC	; 252
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	80 31       	cpi	r24, 0x10	; 16
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <aes_encrypt_128+0x2d0>
     d0c:	fe ce       	rjmp	.-516    	; 0xb0a <aes_encrypt_128+0xcc>
				ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
				}//
        

        // AddRoundKey
			for ( i = 0; i < AES_BLOCK_SIZE; ++i )
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	1f c0       	rjmp	.+62     	; 0xd50 <aes_encrypt_128+0x312>
			{
				*(ciphertext+i) ^= *roundkeys++;
     d12:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d14:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d16:	9c 01       	movw	r18, r24
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	3b 8f       	std	Y+27, r19	; 0x1b
     d1e:	2a 8f       	std	Y+26, r18	; 0x1a
     d20:	fc 01       	movw	r30, r24
     d22:	60 81       	ld	r22, Z
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d2c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	29 81       	ldd	r18, Y+1	; 0x01
     d34:	22 2f       	mov	r18, r18
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d3a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d3c:	24 0f       	add	r18, r20
     d3e:	35 1f       	adc	r19, r21
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	26 27       	eor	r18, r22
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
				ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
				}//
        

        // AddRoundKey
			for ( i = 0; i < AES_BLOCK_SIZE; ++i )
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	80 31       	cpi	r24, 0x10	; 16
     d54:	f0 f2       	brcs	.-68     	; 0xd12 <aes_encrypt_128+0x2d4>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	8a 30       	cpi	r24, 0x0A	; 10
     d60:	08 f4       	brcc	.+2      	; 0xd64 <aes_encrypt_128+0x326>
     d62:	a6 ce       	rjmp	.-692    	; 0xab0 <aes_encrypt_128+0x72>
			}

   
    }
				// last round
				for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     d64:	19 82       	std	Y+1, r1	; 0x01
     d66:	21 c0       	rjmp	.+66     	; 0xdaa <aes_encrypt_128+0x36c>
					*(ciphertext+i) = pgm_read_byte (&SBOX[*(ciphertext+i)] );
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	2e 8d       	ldd	r18, Y+30	; 0x1e
     d70:	3f 8d       	ldd	r19, Y+31	; 0x1f
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	29 81       	ldd	r18, Y+1	; 0x01
     d78:	22 2f       	mov	r18, r18
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d7e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d80:	24 0f       	add	r18, r20
     d82:	35 1f       	adc	r19, r21
     d84:	f9 01       	movw	r30, r18
     d86:	20 81       	ld	r18, Z
     d88:	22 2f       	mov	r18, r18
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	28 59       	subi	r18, 0x98	; 152
     d8e:	3e 4f       	sbci	r19, 0xFE	; 254
     d90:	38 87       	std	Y+8, r19	; 0x08
     d92:	2f 83       	std	Y+7, r18	; 0x07
     d94:	2f 81       	ldd	r18, Y+7	; 0x07
     d96:	38 85       	ldd	r19, Y+8	; 0x08
     d98:	f9 01       	movw	r30, r18
     d9a:	24 91       	lpm	r18, Z
     d9c:	29 87       	std	Y+9, r18	; 0x09
     d9e:	29 85       	ldd	r18, Y+9	; 0x09
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
			}

   
    }
				// last round
				for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	8f 5f       	subi	r24, 0xFF	; 255
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	80 31       	cpi	r24, 0x10	; 16
     dae:	e0 f2       	brcs	.-72     	; 0xd68 <aes_encrypt_128+0x32a>
					*(ciphertext+i) = pgm_read_byte (&SBOX[*(ciphertext+i)] );
				}
				shift_rows(ciphertext);
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     db4:	0e 94 9c 04 	call	0x938	; 0x938 <shift_rows>
				for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	1f c0       	rjmp	.+62     	; 0xdfa <aes_encrypt_128+0x3bc>
					*(ciphertext+i) ^= *roundkeys++;
     dbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dc0:	9c 01       	movw	r18, r24
     dc2:	2f 5f       	subi	r18, 0xFF	; 255
     dc4:	3f 4f       	sbci	r19, 0xFF	; 255
     dc6:	3b 8f       	std	Y+27, r19	; 0x1b
     dc8:	2a 8f       	std	Y+26, r18	; 0x1a
     dca:	fc 01       	movw	r30, r24
     dcc:	60 81       	ld	r22, Z
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     dd6:	3f 8d       	ldd	r19, Y+31	; 0x1f
     dd8:	82 0f       	add	r24, r18
     dda:	93 1f       	adc	r25, r19
     ddc:	29 81       	ldd	r18, Y+1	; 0x01
     dde:	22 2f       	mov	r18, r18
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4e 8d       	ldd	r20, Y+30	; 0x1e
     de4:	5f 8d       	ldd	r21, Y+31	; 0x1f
     de6:	24 0f       	add	r18, r20
     de8:	35 1f       	adc	r19, r21
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	26 27       	eor	r18, r22
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
				// last round
				for (i = 0; i < AES_BLOCK_SIZE; ++i) {
					*(ciphertext+i) = pgm_read_byte (&SBOX[*(ciphertext+i)] );
				}
				shift_rows(ciphertext);
				for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	80 31       	cpi	r24, 0x10	; 16
     dfe:	f0 f2       	brcs	.-68     	; 0xdbc <aes_encrypt_128+0x37e>
					*(ciphertext+i) ^= *roundkeys++;
				}
	

}
     e00:	00 00       	nop
     e02:	6f 96       	adiw	r28, 0x1f	; 31
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <aes_key_schedule_128>:

/*
 * round constants
 */
static const uint8_t RC[10] PROGMEM = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128( uint8_t *key, uint8_t *roundkeys) {
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	2d 97       	sbiw	r28, 0x0d	; 13
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	9b 87       	std	Y+11, r25	; 0x0b
     e2e:	8a 87       	std	Y+10, r24	; 0x0a
     e30:	7d 87       	std	Y+13, r23	; 0x0d
     e32:	6c 87       	std	Y+12, r22	; 0x0c
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     e34:	1b 82       	std	Y+3, r1	; 0x03
     e36:	15 c0       	rjmp	.+42     	; 0xe62 <aes_key_schedule_128+0x4a>
        *roundkeys++ = *key++;
     e38:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e3c:	9c 01       	movw	r18, r24
     e3e:	2f 5f       	subi	r18, 0xFF	; 255
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	3d 87       	std	Y+13, r19	; 0x0d
     e44:	2c 87       	std	Y+12, r18	; 0x0c
     e46:	2a 85       	ldd	r18, Y+10	; 0x0a
     e48:	3b 85       	ldd	r19, Y+11	; 0x0b
     e4a:	a9 01       	movw	r20, r18
     e4c:	4f 5f       	subi	r20, 0xFF	; 255
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	5b 87       	std	Y+11, r21	; 0x0b
     e52:	4a 87       	std	Y+10, r20	; 0x0a
     e54:	f9 01       	movw	r30, r18
     e56:	20 81       	ld	r18, Z
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	80 31       	cpi	r24, 0x10	; 16
     e66:	40 f3       	brcs	.-48     	; 0xe38 <aes_key_schedule_128+0x20>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
     e68:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e6c:	04 97       	sbiw	r24, 0x04	; 4
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
     e72:	1b 82       	std	Y+3, r1	; 0x03
     e74:	f2 c1       	rjmp	.+996    	; 0x125a <aes_key_schedule_128+0x442>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	9c 01       	movw	r18, r24
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	3a 83       	std	Y+2, r19	; 0x02
     e82:	29 83       	std	Y+1, r18	; 0x01
     e84:	fc 01       	movw	r30, r24
     e86:	80 81       	ld	r24, Z
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	88 59       	subi	r24, 0x98	; 152
     e8e:	9e 4f       	sbci	r25, 0xFE	; 254
     e90:	fc 01       	movw	r30, r24
     e92:	80 81       	ld	r24, Z
     e94:	89 87       	std	Y+9, r24	; 0x09
        temp[0] = SBOX[*last4bytes++];
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	9c 01       	movw	r18, r24
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	3a 83       	std	Y+2, r19	; 0x02
     ea2:	29 83       	std	Y+1, r18	; 0x01
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 59       	subi	r24, 0x98	; 152
     eae:	9e 4f       	sbci	r25, 0xFE	; 254
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	8e 83       	std	Y+6, r24	; 0x06
        temp[1] = SBOX[*last4bytes++];
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	9c 01       	movw	r18, r24
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	3a 83       	std	Y+2, r19	; 0x02
     ec2:	29 83       	std	Y+1, r18	; 0x01
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	88 59       	subi	r24, 0x98	; 152
     ece:	9e 4f       	sbci	r25, 0xFE	; 254
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 83       	std	Y+7, r24	; 0x07
        temp[2] = SBOX[*last4bytes++];
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	9c 01       	movw	r18, r24
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	3a 83       	std	Y+2, r19	; 0x02
     ee2:	29 83       	std	Y+1, r18	; 0x01
     ee4:	fc 01       	movw	r30, r24
     ee6:	80 81       	ld	r24, Z
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 59       	subi	r24, 0x98	; 152
     eee:	9e 4f       	sbci	r25, 0xFE	; 254
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	88 87       	std	Y+8, r24	; 0x08
        temp[0] ^= RC[i];
     ef6:	2e 81       	ldd	r18, Y+6	; 0x06
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	88 59       	subi	r24, 0x98	; 152
     f00:	9d 4f       	sbci	r25, 0xFD	; 253
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	82 27       	eor	r24, r18
     f08:	8e 83       	std	Y+6, r24	; 0x06
        lastround = roundkeys-16;
     f0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f0e:	40 97       	sbiw	r24, 0x10	; 16
     f10:	9d 83       	std	Y+5, r25	; 0x05
     f12:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[0] ^ *lastround++;
     f14:	8c 85       	ldd	r24, Y+12	; 0x0c
     f16:	9d 85       	ldd	r25, Y+13	; 0x0d
     f18:	9c 01       	movw	r18, r24
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	3d 87       	std	Y+13, r19	; 0x0d
     f20:	2c 87       	std	Y+12, r18	; 0x0c
     f22:	6e 81       	ldd	r22, Y+6	; 0x06
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	a9 01       	movw	r20, r18
     f2a:	4f 5f       	subi	r20, 0xFF	; 255
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	5d 83       	std	Y+5, r21	; 0x05
     f30:	4c 83       	std	Y+4, r20	; 0x04
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	26 27       	eor	r18, r22
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
        *roundkeys++ = temp[1] ^ *lastround++;
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	9c 01       	movw	r18, r24
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	3d 87       	std	Y+13, r19	; 0x0d
     f48:	2c 87       	std	Y+12, r18	; 0x0c
     f4a:	6f 81       	ldd	r22, Y+7	; 0x07
     f4c:	2c 81       	ldd	r18, Y+4	; 0x04
     f4e:	3d 81       	ldd	r19, Y+5	; 0x05
     f50:	a9 01       	movw	r20, r18
     f52:	4f 5f       	subi	r20, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	5d 83       	std	Y+5, r21	; 0x05
     f58:	4c 83       	std	Y+4, r20	; 0x04
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	26 27       	eor	r18, r22
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
        *roundkeys++ = temp[2] ^ *lastround++;
     f64:	8c 85       	ldd	r24, Y+12	; 0x0c
     f66:	9d 85       	ldd	r25, Y+13	; 0x0d
     f68:	9c 01       	movw	r18, r24
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	3d 87       	std	Y+13, r19	; 0x0d
     f70:	2c 87       	std	Y+12, r18	; 0x0c
     f72:	68 85       	ldd	r22, Y+8	; 0x08
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	a9 01       	movw	r20, r18
     f7a:	4f 5f       	subi	r20, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4c 83       	std	Y+4, r20	; 0x04
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	26 27       	eor	r18, r22
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
        *roundkeys++ = temp[3] ^ *lastround++;
     f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f90:	9c 01       	movw	r18, r24
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	3d 87       	std	Y+13, r19	; 0x0d
     f98:	2c 87       	std	Y+12, r18	; 0x0c
     f9a:	69 85       	ldd	r22, Y+9	; 0x09
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	a9 01       	movw	r20, r18
     fa2:	4f 5f       	subi	r20, 0xFF	; 255
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	5d 83       	std	Y+5, r21	; 0x05
     fa8:	4c 83       	std	Y+4, r20	; 0x04
     faa:	f9 01       	movw	r30, r18
     fac:	20 81       	ld	r18, Z
     fae:	26 27       	eor	r18, r22
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fb4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fb8:	9c 01       	movw	r18, r24
     fba:	2f 5f       	subi	r18, 0xFF	; 255
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	3d 87       	std	Y+13, r19	; 0x0d
     fc0:	2c 87       	std	Y+12, r18	; 0x0c
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	3a 81       	ldd	r19, Y+2	; 0x02
     fc6:	a9 01       	movw	r20, r18
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	5a 83       	std	Y+2, r21	; 0x02
     fce:	49 83       	std	Y+1, r20	; 0x01
     fd0:	f9 01       	movw	r30, r18
     fd2:	60 81       	ld	r22, Z
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	a9 01       	movw	r20, r18
     fda:	4f 5f       	subi	r20, 0xFF	; 255
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	4c 83       	std	Y+4, r20	; 0x04
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	26 27       	eor	r18, r22
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fec:	8c 85       	ldd	r24, Y+12	; 0x0c
     fee:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff0:	9c 01       	movw	r18, r24
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	3d 87       	std	Y+13, r19	; 0x0d
     ff8:	2c 87       	std	Y+12, r18	; 0x0c
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	a9 01       	movw	r20, r18
    1000:	4f 5f       	subi	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	5a 83       	std	Y+2, r21	; 0x02
    1006:	49 83       	std	Y+1, r20	; 0x01
    1008:	f9 01       	movw	r30, r18
    100a:	60 81       	ld	r22, Z
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	a9 01       	movw	r20, r18
    1012:	4f 5f       	subi	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	5d 83       	std	Y+5, r21	; 0x05
    1018:	4c 83       	std	Y+4, r20	; 0x04
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	26 27       	eor	r18, r22
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1024:	8c 85       	ldd	r24, Y+12	; 0x0c
    1026:	9d 85       	ldd	r25, Y+13	; 0x0d
    1028:	9c 01       	movw	r18, r24
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	3d 87       	std	Y+13, r19	; 0x0d
    1030:	2c 87       	std	Y+12, r18	; 0x0c
    1032:	29 81       	ldd	r18, Y+1	; 0x01
    1034:	3a 81       	ldd	r19, Y+2	; 0x02
    1036:	a9 01       	movw	r20, r18
    1038:	4f 5f       	subi	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	5a 83       	std	Y+2, r21	; 0x02
    103e:	49 83       	std	Y+1, r20	; 0x01
    1040:	f9 01       	movw	r30, r18
    1042:	60 81       	ld	r22, Z
    1044:	2c 81       	ldd	r18, Y+4	; 0x04
    1046:	3d 81       	ldd	r19, Y+5	; 0x05
    1048:	a9 01       	movw	r20, r18
    104a:	4f 5f       	subi	r20, 0xFF	; 255
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
    104e:	5d 83       	std	Y+5, r21	; 0x05
    1050:	4c 83       	std	Y+4, r20	; 0x04
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	26 27       	eor	r18, r22
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    105c:	8c 85       	ldd	r24, Y+12	; 0x0c
    105e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1060:	9c 01       	movw	r18, r24
    1062:	2f 5f       	subi	r18, 0xFF	; 255
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	3d 87       	std	Y+13, r19	; 0x0d
    1068:	2c 87       	std	Y+12, r18	; 0x0c
    106a:	29 81       	ldd	r18, Y+1	; 0x01
    106c:	3a 81       	ldd	r19, Y+2	; 0x02
    106e:	a9 01       	movw	r20, r18
    1070:	4f 5f       	subi	r20, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	5a 83       	std	Y+2, r21	; 0x02
    1076:	49 83       	std	Y+1, r20	; 0x01
    1078:	f9 01       	movw	r30, r18
    107a:	60 81       	ld	r22, Z
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	a9 01       	movw	r20, r18
    1082:	4f 5f       	subi	r20, 0xFF	; 255
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	5d 83       	std	Y+5, r21	; 0x05
    1088:	4c 83       	std	Y+4, r20	; 0x04
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	26 27       	eor	r18, r22
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1094:	8c 85       	ldd	r24, Y+12	; 0x0c
    1096:	9d 85       	ldd	r25, Y+13	; 0x0d
    1098:	9c 01       	movw	r18, r24
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	3d 87       	std	Y+13, r19	; 0x0d
    10a0:	2c 87       	std	Y+12, r18	; 0x0c
    10a2:	29 81       	ldd	r18, Y+1	; 0x01
    10a4:	3a 81       	ldd	r19, Y+2	; 0x02
    10a6:	a9 01       	movw	r20, r18
    10a8:	4f 5f       	subi	r20, 0xFF	; 255
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	5a 83       	std	Y+2, r21	; 0x02
    10ae:	49 83       	std	Y+1, r20	; 0x01
    10b0:	f9 01       	movw	r30, r18
    10b2:	60 81       	ld	r22, Z
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	a9 01       	movw	r20, r18
    10ba:	4f 5f       	subi	r20, 0xFF	; 255
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	5d 83       	std	Y+5, r21	; 0x05
    10c0:	4c 83       	std	Y+4, r20	; 0x04
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	26 27       	eor	r18, r22
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    10cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    10d0:	9c 01       	movw	r18, r24
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	3d 87       	std	Y+13, r19	; 0x0d
    10d8:	2c 87       	std	Y+12, r18	; 0x0c
    10da:	29 81       	ldd	r18, Y+1	; 0x01
    10dc:	3a 81       	ldd	r19, Y+2	; 0x02
    10de:	a9 01       	movw	r20, r18
    10e0:	4f 5f       	subi	r20, 0xFF	; 255
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	5a 83       	std	Y+2, r21	; 0x02
    10e6:	49 83       	std	Y+1, r20	; 0x01
    10e8:	f9 01       	movw	r30, r18
    10ea:	60 81       	ld	r22, Z
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	a9 01       	movw	r20, r18
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	5d 83       	std	Y+5, r21	; 0x05
    10f8:	4c 83       	std	Y+4, r20	; 0x04
    10fa:	f9 01       	movw	r30, r18
    10fc:	20 81       	ld	r18, Z
    10fe:	26 27       	eor	r18, r22
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1104:	8c 85       	ldd	r24, Y+12	; 0x0c
    1106:	9d 85       	ldd	r25, Y+13	; 0x0d
    1108:	9c 01       	movw	r18, r24
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	3d 87       	std	Y+13, r19	; 0x0d
    1110:	2c 87       	std	Y+12, r18	; 0x0c
    1112:	29 81       	ldd	r18, Y+1	; 0x01
    1114:	3a 81       	ldd	r19, Y+2	; 0x02
    1116:	a9 01       	movw	r20, r18
    1118:	4f 5f       	subi	r20, 0xFF	; 255
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	5a 83       	std	Y+2, r21	; 0x02
    111e:	49 83       	std	Y+1, r20	; 0x01
    1120:	f9 01       	movw	r30, r18
    1122:	60 81       	ld	r22, Z
    1124:	2c 81       	ldd	r18, Y+4	; 0x04
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	a9 01       	movw	r20, r18
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	5d 83       	std	Y+5, r21	; 0x05
    1130:	4c 83       	std	Y+4, r20	; 0x04
    1132:	f9 01       	movw	r30, r18
    1134:	20 81       	ld	r18, Z
    1136:	26 27       	eor	r18, r22
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    113c:	8c 85       	ldd	r24, Y+12	; 0x0c
    113e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1140:	9c 01       	movw	r18, r24
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	3d 87       	std	Y+13, r19	; 0x0d
    1148:	2c 87       	std	Y+12, r18	; 0x0c
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	a9 01       	movw	r20, r18
    1150:	4f 5f       	subi	r20, 0xFF	; 255
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	5a 83       	std	Y+2, r21	; 0x02
    1156:	49 83       	std	Y+1, r20	; 0x01
    1158:	f9 01       	movw	r30, r18
    115a:	60 81       	ld	r22, Z
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	a9 01       	movw	r20, r18
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	5d 83       	std	Y+5, r21	; 0x05
    1168:	4c 83       	std	Y+4, r20	; 0x04
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	26 27       	eor	r18, r22
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1174:	8c 85       	ldd	r24, Y+12	; 0x0c
    1176:	9d 85       	ldd	r25, Y+13	; 0x0d
    1178:	9c 01       	movw	r18, r24
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	3d 87       	std	Y+13, r19	; 0x0d
    1180:	2c 87       	std	Y+12, r18	; 0x0c
    1182:	29 81       	ldd	r18, Y+1	; 0x01
    1184:	3a 81       	ldd	r19, Y+2	; 0x02
    1186:	a9 01       	movw	r20, r18
    1188:	4f 5f       	subi	r20, 0xFF	; 255
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	5a 83       	std	Y+2, r21	; 0x02
    118e:	49 83       	std	Y+1, r20	; 0x01
    1190:	f9 01       	movw	r30, r18
    1192:	60 81       	ld	r22, Z
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	a9 01       	movw	r20, r18
    119a:	4f 5f       	subi	r20, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	5d 83       	std	Y+5, r21	; 0x05
    11a0:	4c 83       	std	Y+4, r20	; 0x04
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	26 27       	eor	r18, r22
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b0:	9c 01       	movw	r18, r24
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	3d 87       	std	Y+13, r19	; 0x0d
    11b8:	2c 87       	std	Y+12, r18	; 0x0c
    11ba:	29 81       	ldd	r18, Y+1	; 0x01
    11bc:	3a 81       	ldd	r19, Y+2	; 0x02
    11be:	a9 01       	movw	r20, r18
    11c0:	4f 5f       	subi	r20, 0xFF	; 255
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	5a 83       	std	Y+2, r21	; 0x02
    11c6:	49 83       	std	Y+1, r20	; 0x01
    11c8:	f9 01       	movw	r30, r18
    11ca:	60 81       	ld	r22, Z
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	a9 01       	movw	r20, r18
    11d2:	4f 5f       	subi	r20, 0xFF	; 255
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	5d 83       	std	Y+5, r21	; 0x05
    11d8:	4c 83       	std	Y+4, r20	; 0x04
    11da:	f9 01       	movw	r30, r18
    11dc:	20 81       	ld	r18, Z
    11de:	26 27       	eor	r18, r22
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    11e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e8:	9c 01       	movw	r18, r24
    11ea:	2f 5f       	subi	r18, 0xFF	; 255
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	3d 87       	std	Y+13, r19	; 0x0d
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	29 81       	ldd	r18, Y+1	; 0x01
    11f4:	3a 81       	ldd	r19, Y+2	; 0x02
    11f6:	a9 01       	movw	r20, r18
    11f8:	4f 5f       	subi	r20, 0xFF	; 255
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	5a 83       	std	Y+2, r21	; 0x02
    11fe:	49 83       	std	Y+1, r20	; 0x01
    1200:	f9 01       	movw	r30, r18
    1202:	60 81       	ld	r22, Z
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	a9 01       	movw	r20, r18
    120a:	4f 5f       	subi	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	5d 83       	std	Y+5, r21	; 0x05
    1210:	4c 83       	std	Y+4, r20	; 0x04
    1212:	f9 01       	movw	r30, r18
    1214:	20 81       	ld	r18, Z
    1216:	26 27       	eor	r18, r22
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    121c:	8c 85       	ldd	r24, Y+12	; 0x0c
    121e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1220:	9c 01       	movw	r18, r24
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	3d 87       	std	Y+13, r19	; 0x0d
    1228:	2c 87       	std	Y+12, r18	; 0x0c
    122a:	29 81       	ldd	r18, Y+1	; 0x01
    122c:	3a 81       	ldd	r19, Y+2	; 0x02
    122e:	a9 01       	movw	r20, r18
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	5a 83       	std	Y+2, r21	; 0x02
    1236:	49 83       	std	Y+1, r20	; 0x01
    1238:	f9 01       	movw	r30, r18
    123a:	60 81       	ld	r22, Z
    123c:	2c 81       	ldd	r18, Y+4	; 0x04
    123e:	3d 81       	ldd	r19, Y+5	; 0x05
    1240:	a9 01       	movw	r20, r18
    1242:	4f 5f       	subi	r20, 0xFF	; 255
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	5d 83       	std	Y+5, r21	; 0x05
    1248:	4c 83       	std	Y+4, r20	; 0x04
    124a:	f9 01       	movw	r30, r18
    124c:	20 81       	ld	r18, Z
    124e:	26 27       	eor	r18, r22
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	8a 30       	cpi	r24, 0x0A	; 10
    125e:	08 f4       	brcc	.+2      	; 0x1262 <aes_key_schedule_128+0x44a>
    1260:	0a ce       	rjmp	.-1004   	; 0xe76 <aes_key_schedule_128+0x5e>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    1262:	00 00       	nop
    1264:	2d 96       	adiw	r28, 0x0d	; 13
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(int argc, char *argv[]) {
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	c5 5f       	subi	r28, 0xF5	; 245
    1280:	d1 09       	sbc	r29, r1
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	9e 01       	movw	r18, r28
    128e:	2e 50       	subi	r18, 0x0E	; 14
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	f9 01       	movw	r30, r18
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	ce 01       	movw	r24, r28
    129a:	8c 50       	subi	r24, 0x0C	; 12
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	fc 01       	movw	r30, r24
    12a0:	71 83       	std	Z+1, r23	; 0x01
    12a2:	60 83       	st	Z, r22

	uint8_t i;

	/* 128 bit key */
	uint8_t key[] = {
    12a4:	80 e1       	ldi	r24, 0x10	; 16
    12a6:	e0 e0       	ldi	r30, 0x00	; 0
    12a8:	f1 e0       	ldi	r31, 0x01	; 1
    12aa:	de 01       	movw	r26, r28
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	8a 95       	dec	r24
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0x38>
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

	uint8_t plaintext[] = {
    12b6:	80 e1       	ldi	r24, 0x10	; 16
    12b8:	e0 e1       	ldi	r30, 0x10	; 16
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	de 01       	movw	r26, r28
    12be:	52 96       	adiw	r26, 0x12	; 18
    12c0:	01 90       	ld	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	8a 95       	dec	r24
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <main+0x4a>
	};

 
	 uint8_t ciphertext[AES_BLOCK_SIZE];

	const uint8_t const_cipher[] = {
    12c8:	80 e1       	ldi	r24, 0x10	; 16
    12ca:	e0 e2       	ldi	r30, 0x20	; 32
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	de 01       	movw	r26, r28
    12d0:	d2 96       	adiw	r26, 0x32	; 50
    12d2:	01 90       	ld	r0, Z+
    12d4:	0d 92       	st	X+, r0
    12d6:	8a 95       	dec	r24
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <main+0x5c>
	};
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(key, roundkeys);
    12da:	9e 01       	movw	r18, r28
    12dc:	2e 5b       	subi	r18, 0xBE	; 190
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	ce 01       	movw	r24, r28
    12e2:	02 96       	adiw	r24, 0x02	; 2
    12e4:	b9 01       	movw	r22, r18
    12e6:	0e 94 0c 07 	call	0xe18	; 0xe18 <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
    12ea:	ae 01       	movw	r20, r28
    12ec:	4e 5d       	subi	r20, 0xDE	; 222
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	9e 01       	movw	r18, r28
    12f2:	2e 5e       	subi	r18, 0xEE	; 238
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	ce 01       	movw	r24, r28
    12f8:	8e 5b       	subi	r24, 0xBE	; 190
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	b9 01       	movw	r22, r18
    12fe:	0e 94 1f 05 	call	0xa3e	; 0xa3e <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	19 c0       	rjmp	.+50     	; 0x1338 <main+0xc2>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 01       	movw	r18, r28
    130e:	2e 5d       	subi	r18, 0xDE	; 222
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	fc 01       	movw	r30, r24
    1318:	40 81       	ld	r20, Z
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e 01       	movw	r18, r28
    1322:	2e 5c       	subi	r18, 0xCE	; 206
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	48 17       	cp	r20, r24
    1330:	39 f4       	brne	.+14     	; 0x1340 <main+0xca>
	aes_key_schedule_128(key, roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 31       	cpi	r24, 0x10	; 16
    133c:	20 f3       	brcs	.-56     	; 0x1306 <main+0x90>
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <main+0xcc>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    1340:	00 00       	nop
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    1342:	ae 01       	movw	r20, r28
    1344:	4e 5d       	subi	r20, 0xDE	; 222
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	9e 01       	movw	r18, r28
    134a:	2e 5d       	subi	r18, 0xDE	; 222
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	ce 01       	movw	r24, r28
    1350:	8e 5b       	subi	r24, 0xBE	; 190
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	19 c0       	rjmp	.+50     	; 0x1390 <main+0x11a>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9e 01       	movw	r18, r28
    1366:	2e 5d       	subi	r18, 0xDE	; 222
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	fc 01       	movw	r30, r24
    1370:	40 81       	ld	r20, Z
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9e 01       	movw	r18, r28
    137a:	2e 5e       	subi	r18, 0xEE	; 238
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	fc 01       	movw	r30, r24
    1384:	80 81       	ld	r24, Z
    1386:	48 17       	cp	r20, r24
    1388:	39 f4       	brne	.+14     	; 0x1398 <main+0x122>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	80 31       	cpi	r24, 0x10	; 16
    1394:	20 f3       	brcs	.-56     	; 0x135e <main+0xe8>
    1396:	01 c0       	rjmp	.+2      	; 0x139a <main+0x124>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    1398:	00 00       	nop
	}

	return 0;
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
}
    139e:	cb 50       	subi	r28, 0x0B	; 11
    13a0:	df 4f       	sbci	r29, 0xFF	; 255
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <_exit>:
    13b2:	f8 94       	cli

000013b4 <__stop_program>:
    13b4:	ff cf       	rjmp	.-2      	; 0x13b4 <__stop_program>
