
Optimization.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  000011aa  0000121e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000806  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035c  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ae  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018b  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024e  00000000  00000000  00003293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ea       	ldi	r30, 0xAA	; 170
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 33       	cpi	r26, 0x3A	; 58
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 21 08 	call	0x1042	; 0x1042 <main>
      9e:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	0f 92       	push	r0
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	88 23       	and	r24, r24
      b6:	4c f4       	brge	.+18     	; 0xca <mul2+0x24>
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	88 2f       	mov	r24, r24
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	88 0f       	add	r24, r24
      c0:	99 1f       	adc	r25, r25
      c2:	98 2f       	mov	r25, r24
      c4:	8b e1       	ldi	r24, 0x1B	; 27
      c6:	89 27       	eor	r24, r25
      c8:	02 c0       	rjmp	.+4      	; 0xce <mul2+0x28>
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	88 0f       	add	r24, r24
}
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(uint8_t *state) {
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <inv_shift_rows+0x6>
      dc:	0f 92       	push	r0
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	9b 83       	std	Y+3, r25	; 0x03
      e4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
      e6:	8a 81       	ldd	r24, Y+2	; 0x02
      e8:	9b 81       	ldd	r25, Y+3	; 0x03
      ea:	fc 01       	movw	r30, r24
      ec:	85 85       	ldd	r24, Z+13	; 0x0d
      ee:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	9b 81       	ldd	r25, Y+3	; 0x03
      f4:	0d 96       	adiw	r24, 0x0d	; 13
      f6:	2a 81       	ldd	r18, Y+2	; 0x02
      f8:	3b 81       	ldd	r19, Y+3	; 0x03
      fa:	f9 01       	movw	r30, r18
      fc:	21 85       	ldd	r18, Z+9	; 0x09
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	9b 81       	ldd	r25, Y+3	; 0x03
     106:	09 96       	adiw	r24, 0x09	; 9
     108:	2a 81       	ldd	r18, Y+2	; 0x02
     10a:	3b 81       	ldd	r19, Y+3	; 0x03
     10c:	f9 01       	movw	r30, r18
     10e:	25 81       	ldd	r18, Z+5	; 0x05
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	9b 81       	ldd	r25, Y+3	; 0x03
     118:	05 96       	adiw	r24, 0x05	; 5
     11a:	2a 81       	ldd	r18, Y+2	; 0x02
     11c:	3b 81       	ldd	r19, Y+3	; 0x03
     11e:	f9 01       	movw	r30, r18
     120:	21 81       	ldd	r18, Z+1	; 0x01
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
    *(state+1)  = temp;
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	9b 81       	ldd	r25, Y+3	; 0x03
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	29 81       	ldd	r18, Y+1	; 0x01
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	9b 81       	ldd	r25, Y+3	; 0x03
     136:	fc 01       	movw	r30, r24
     138:	86 85       	ldd	r24, Z+14	; 0x0e
     13a:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	9b 81       	ldd	r25, Y+3	; 0x03
     140:	0e 96       	adiw	r24, 0x0e	; 14
     142:	2a 81       	ldd	r18, Y+2	; 0x02
     144:	3b 81       	ldd	r19, Y+3	; 0x03
     146:	f9 01       	movw	r30, r18
     148:	26 81       	ldd	r18, Z+6	; 0x06
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
    *(state+6)  = temp;
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	9b 81       	ldd	r25, Y+3	; 0x03
     152:	06 96       	adiw	r24, 0x06	; 6
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
    temp        = *(state+10);
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	9b 81       	ldd	r25, Y+3	; 0x03
     15e:	fc 01       	movw	r30, r24
     160:	82 85       	ldd	r24, Z+10	; 0x0a
     162:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	0a 96       	adiw	r24, 0x0a	; 10
     16a:	2a 81       	ldd	r18, Y+2	; 0x02
     16c:	3b 81       	ldd	r19, Y+3	; 0x03
     16e:	f9 01       	movw	r30, r18
     170:	22 81       	ldd	r18, Z+2	; 0x02
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
    *(state+2)  = temp;
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	9b 81       	ldd	r25, Y+3	; 0x03
     17a:	02 96       	adiw	r24, 0x02	; 2
     17c:	29 81       	ldd	r18, Y+1	; 0x01
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     182:	8a 81       	ldd	r24, Y+2	; 0x02
     184:	9b 81       	ldd	r25, Y+3	; 0x03
     186:	fc 01       	movw	r30, r24
     188:	83 81       	ldd	r24, Z+3	; 0x03
     18a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	9b 81       	ldd	r25, Y+3	; 0x03
     190:	03 96       	adiw	r24, 0x03	; 3
     192:	2a 81       	ldd	r18, Y+2	; 0x02
     194:	3b 81       	ldd	r19, Y+3	; 0x03
     196:	f9 01       	movw	r30, r18
     198:	27 81       	ldd	r18, Z+7	; 0x07
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	9b 81       	ldd	r25, Y+3	; 0x03
     1a2:	07 96       	adiw	r24, 0x07	; 7
     1a4:	2a 81       	ldd	r18, Y+2	; 0x02
     1a6:	3b 81       	ldd	r19, Y+3	; 0x03
     1a8:	f9 01       	movw	r30, r18
     1aa:	23 85       	ldd	r18, Z+11	; 0x0b
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	9b 81       	ldd	r25, Y+3	; 0x03
     1b4:	0b 96       	adiw	r24, 0x0b	; 11
     1b6:	2a 81       	ldd	r18, Y+2	; 0x02
     1b8:	3b 81       	ldd	r19, Y+3	; 0x03
     1ba:	f9 01       	movw	r30, r18
     1bc:	27 85       	ldd	r18, Z+15	; 0x0f
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
    *(state+15) = temp;
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	9b 81       	ldd	r25, Y+3	; 0x03
     1c6:	0f 96       	adiw	r24, 0x0f	; 15
     1c8:	29 81       	ldd	r18, Y+1	; 0x01
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
}
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <aes_decrypt_128>:
void aes_decrypt_128( uint8_t *roundkeys,  uint8_t *ciphertext, uint8_t *plaintext) {
     1da:	ff 92       	push	r15
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	6b 97       	sbiw	r28, 0x1b	; 27
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	9f 8b       	std	Y+23, r25	; 0x17
     1f6:	8e 8b       	std	Y+22, r24	; 0x16
     1f8:	79 8f       	std	Y+25, r23	; 0x19
     1fa:	68 8f       	std	Y+24, r22	; 0x18
     1fc:	5b 8f       	std	Y+27, r21	; 0x1b
     1fe:	4a 8f       	std	Y+26, r20	; 0x1a

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     200:	8e 89       	ldd	r24, Y+22	; 0x16
     202:	9f 89       	ldd	r25, Y+23	; 0x17
     204:	80 56       	subi	r24, 0x60	; 96
     206:	9f 4f       	sbci	r25, 0xFF	; 255
     208:	9f 8b       	std	Y+23, r25	; 0x17
     20a:	8e 8b       	std	Y+22, r24	; 0x16

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     20c:	19 82       	std	Y+1, r1	; 0x01
     20e:	1f c0       	rjmp	.+62     	; 0x24e <aes_decrypt_128+0x74>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	88 2f       	mov	r24, r24
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	2a 8d       	ldd	r18, Y+26	; 0x1a
     218:	3b 8d       	ldd	r19, Y+27	; 0x1b
     21a:	82 0f       	add	r24, r18
     21c:	93 1f       	adc	r25, r19
     21e:	29 81       	ldd	r18, Y+1	; 0x01
     220:	22 2f       	mov	r18, r18
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	48 8d       	ldd	r20, Y+24	; 0x18
     226:	59 8d       	ldd	r21, Y+25	; 0x19
     228:	24 0f       	add	r18, r20
     22a:	35 1f       	adc	r19, r21
     22c:	f9 01       	movw	r30, r18
     22e:	60 81       	ld	r22, Z
     230:	29 81       	ldd	r18, Y+1	; 0x01
     232:	22 2f       	mov	r18, r18
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	4e 89       	ldd	r20, Y+22	; 0x16
     238:	5f 89       	ldd	r21, Y+23	; 0x17
     23a:	24 0f       	add	r18, r20
     23c:	35 1f       	adc	r19, r21
     23e:	f9 01       	movw	r30, r18
     240:	20 81       	ld	r18, Z
     242:	26 27       	eor	r18, r22
     244:	fc 01       	movw	r30, r24
     246:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	80 31       	cpi	r24, 0x10	; 16
     252:	f0 f2       	brcs	.-68     	; 0x210 <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
     254:	8e 89       	ldd	r24, Y+22	; 0x16
     256:	9f 89       	ldd	r25, Y+23	; 0x17
     258:	40 97       	sbiw	r24, 0x10	; 16
     25a:	9f 8b       	std	Y+23, r25	; 0x17
     25c:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
     25e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     260:	9b 8d       	ldd	r25, Y+27	; 0x1b
     262:	0e 94 6b 00 	call	0xd6	; 0xd6 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     266:	19 82       	std	Y+1, r1	; 0x01
     268:	1b c0       	rjmp	.+54     	; 0x2a0 <aes_decrypt_128+0xc6>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	2a 8d       	ldd	r18, Y+26	; 0x1a
     272:	3b 8d       	ldd	r19, Y+27	; 0x1b
     274:	82 0f       	add	r24, r18
     276:	93 1f       	adc	r25, r19
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	22 2f       	mov	r18, r18
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     280:	5b 8d       	ldd	r21, Y+27	; 0x1b
     282:	24 0f       	add	r18, r20
     284:	35 1f       	adc	r19, r21
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	22 2f       	mov	r18, r18
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	20 50       	subi	r18, 0x00	; 0
     290:	3f 4f       	sbci	r19, 0xFF	; 255
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	8f 5f       	subi	r24, 0xFF	; 255
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	80 31       	cpi	r24, 0x10	; 16
     2a4:	10 f3       	brcs	.-60     	; 0x26a <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	8a 83       	std	Y+2, r24	; 0x02
     2aa:	ef c1       	rjmp	.+990    	; 0x68a <aes_decrypt_128+0x4b0>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     2ac:	19 82       	std	Y+1, r1	; 0x01
     2ae:	20 c0       	rjmp	.+64     	; 0x2f0 <aes_decrypt_128+0x116>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9e 01       	movw	r18, r28
     2b8:	2a 5f       	subi	r18, 0xFA	; 250
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	82 0f       	add	r24, r18
     2be:	93 1f       	adc	r25, r19
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	22 2f       	mov	r18, r18
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     2c8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     2ca:	24 0f       	add	r18, r20
     2cc:	35 1f       	adc	r19, r21
     2ce:	f9 01       	movw	r30, r18
     2d0:	60 81       	ld	r22, Z
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	22 2f       	mov	r18, r18
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	4e 89       	ldd	r20, Y+22	; 0x16
     2da:	5f 89       	ldd	r21, Y+23	; 0x17
     2dc:	24 0f       	add	r18, r20
     2de:	35 1f       	adc	r19, r21
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	26 27       	eor	r18, r22
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	80 31       	cpi	r24, 0x10	; 16
     2f4:	e8 f2       	brcs	.-70     	; 0x2b0 <aes_decrypt_128+0xd6>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     2f6:	19 82       	std	Y+1, r1	; 0x01
     2f8:	98 c1       	rjmp	.+816    	; 0x62a <aes_decrypt_128+0x450>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	88 2f       	mov	r24, r24
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	9e 01       	movw	r18, r28
     302:	2a 5f       	subi	r18, 0xFA	; 250
     304:	3f 4f       	sbci	r19, 0xFF	; 255
     306:	82 0f       	add	r24, r18
     308:	93 1f       	adc	r25, r19
     30a:	fc 01       	movw	r30, r24
     30c:	40 81       	ld	r20, Z
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	88 2f       	mov	r24, r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	9e 01       	movw	r18, r28
     318:	2a 5f       	subi	r18, 0xFA	; 250
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	48 27       	eor	r20, r24
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	02 96       	adiw	r24, 0x02	; 2
     32e:	9e 01       	movw	r18, r28
     330:	2a 5f       	subi	r18, 0xFA	; 250
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	82 0f       	add	r24, r18
     336:	93 1f       	adc	r25, r19
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	48 27       	eor	r20, r24
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	03 96       	adiw	r24, 0x03	; 3
     346:	9e 01       	movw	r18, r28
     348:	2a 5f       	subi	r18, 0xFA	; 250
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	82 0f       	add	r24, r18
     34e:	93 1f       	adc	r25, r19
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	84 27       	eor	r24, r20
     356:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 2f       	mov	r24, r24
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     360:	3b 8d       	ldd	r19, Y+27	; 0x1b
     362:	89 01       	movw	r16, r18
     364:	08 0f       	add	r16, r24
     366:	19 1f       	adc	r17, r25
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9e 01       	movw	r18, r28
     370:	2a 5f       	subi	r18, 0xFA	; 250
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	82 0f       	add	r24, r18
     376:	93 1f       	adc	r25, r19
     378:	fc 01       	movw	r30, r24
     37a:	90 81       	ld	r25, Z
     37c:	8b 81       	ldd	r24, Y+3	; 0x03
     37e:	f9 2e       	mov	r15, r25
     380:	f8 26       	eor	r15, r24
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	9e 01       	movw	r18, r28
     38a:	2a 5f       	subi	r18, 0xFA	; 250
     38c:	3f 4f       	sbci	r19, 0xFF	; 255
     38e:	82 0f       	add	r24, r18
     390:	93 1f       	adc	r25, r19
     392:	fc 01       	movw	r30, r24
     394:	40 81       	ld	r20, Z
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	9e 01       	movw	r18, r28
     3a0:	2a 5f       	subi	r18, 0xFA	; 250
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	84 27       	eor	r24, r20
     3ae:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     3b2:	8f 25       	eor	r24, r15
     3b4:	f8 01       	movw	r30, r16
     3b6:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     3c2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     3c4:	89 01       	movw	r16, r18
     3c6:	08 0f       	add	r16, r24
     3c8:	19 1f       	adc	r17, r25
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9e 01       	movw	r18, r28
     3d4:	2a 5f       	subi	r18, 0xFA	; 250
     3d6:	3f 4f       	sbci	r19, 0xFF	; 255
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	fc 01       	movw	r30, r24
     3de:	90 81       	ld	r25, Z
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	f9 2e       	mov	r15, r25
     3e4:	f8 26       	eor	r15, r24
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	9e 01       	movw	r18, r28
     3f0:	2a 5f       	subi	r18, 0xFA	; 250
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	fc 01       	movw	r30, r24
     3fa:	40 81       	ld	r20, Z
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	02 96       	adiw	r24, 0x02	; 2
     404:	9e 01       	movw	r18, r28
     406:	2a 5f       	subi	r18, 0xFA	; 250
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	82 0f       	add	r24, r18
     40c:	93 1f       	adc	r25, r19
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	84 27       	eor	r24, r20
     414:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     418:	8f 25       	eor	r24, r15
     41a:	f8 01       	movw	r30, r16
     41c:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	02 96       	adiw	r24, 0x02	; 2
     426:	2a 8d       	ldd	r18, Y+26	; 0x1a
     428:	3b 8d       	ldd	r19, Y+27	; 0x1b
     42a:	89 01       	movw	r16, r18
     42c:	08 0f       	add	r16, r24
     42e:	19 1f       	adc	r17, r25
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	88 2f       	mov	r24, r24
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	02 96       	adiw	r24, 0x02	; 2
     438:	9e 01       	movw	r18, r28
     43a:	2a 5f       	subi	r18, 0xFA	; 250
     43c:	3f 4f       	sbci	r19, 0xFF	; 255
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	fc 01       	movw	r30, r24
     444:	90 81       	ld	r25, Z
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	f9 2e       	mov	r15, r25
     44a:	f8 26       	eor	r15, r24
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	88 2f       	mov	r24, r24
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 96       	adiw	r24, 0x02	; 2
     454:	9e 01       	movw	r18, r28
     456:	2a 5f       	subi	r18, 0xFA	; 250
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	82 0f       	add	r24, r18
     45c:	93 1f       	adc	r25, r19
     45e:	fc 01       	movw	r30, r24
     460:	40 81       	ld	r20, Z
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	03 96       	adiw	r24, 0x03	; 3
     46a:	9e 01       	movw	r18, r28
     46c:	2a 5f       	subi	r18, 0xFA	; 250
     46e:	3f 4f       	sbci	r19, 0xFF	; 255
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	84 27       	eor	r24, r20
     47a:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     47e:	8f 25       	eor	r24, r15
     480:	f8 01       	movw	r30, r16
     482:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	03 96       	adiw	r24, 0x03	; 3
     48c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     48e:	3b 8d       	ldd	r19, Y+27	; 0x1b
     490:	89 01       	movw	r16, r18
     492:	08 0f       	add	r16, r24
     494:	19 1f       	adc	r17, r25
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	03 96       	adiw	r24, 0x03	; 3
     49e:	9e 01       	movw	r18, r28
     4a0:	2a 5f       	subi	r18, 0xFA	; 250
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	fc 01       	movw	r30, r24
     4aa:	90 81       	ld	r25, Z
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	f9 2e       	mov	r15, r25
     4b0:	f8 26       	eor	r15, r24
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	03 96       	adiw	r24, 0x03	; 3
     4ba:	9e 01       	movw	r18, r28
     4bc:	2a 5f       	subi	r18, 0xFA	; 250
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	fc 01       	movw	r30, r24
     4c6:	40 81       	ld	r20, Z
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9e 01       	movw	r18, r28
     4d0:	2a 5f       	subi	r18, 0xFA	; 250
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	82 0f       	add	r24, r18
     4d6:	93 1f       	adc	r25, r19
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	84 27       	eor	r24, r20
     4de:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     4e2:	8f 25       	eor	r24, r15
     4e4:	f8 01       	movw	r30, r16
     4e6:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9e 01       	movw	r18, r28
     4f0:	2a 5f       	subi	r18, 0xFA	; 250
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	fc 01       	movw	r30, r24
     4fa:	40 81       	ld	r20, Z
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	02 96       	adiw	r24, 0x02	; 2
     504:	9e 01       	movw	r18, r28
     506:	2a 5f       	subi	r18, 0xFA	; 250
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	84 27       	eor	r24, r20
     514:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     518:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     51c:	8c 83       	std	Y+4, r24	; 0x04
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	9e 01       	movw	r18, r28
     528:	2a 5f       	subi	r18, 0xFA	; 250
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	82 0f       	add	r24, r18
     52e:	93 1f       	adc	r25, r19
     530:	fc 01       	movw	r30, r24
     532:	40 81       	ld	r20, Z
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	03 96       	adiw	r24, 0x03	; 3
     53c:	9e 01       	movw	r18, r28
     53e:	2a 5f       	subi	r18, 0xFA	; 250
     540:	3f 4f       	sbci	r19, 0xFF	; 255
     542:	82 0f       	add	r24, r18
     544:	93 1f       	adc	r25, r19
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	84 27       	eor	r24, r20
     54c:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     550:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     554:	8d 83       	std	Y+5, r24	; 0x05
            t = mul2(u ^ v);
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	8d 81       	ldd	r24, Y+5	; 0x05
     55a:	89 27       	eor	r24, r25
     55c:	0e 94 53 00 	call	0xa6	; 0xa6 <mul2>
     560:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   ^= t ^ u;
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	2a 8d       	ldd	r18, Y+26	; 0x1a
     56a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     56c:	82 0f       	add	r24, r18
     56e:	93 1f       	adc	r25, r19
     570:	29 81       	ldd	r18, Y+1	; 0x01
     572:	22 2f       	mov	r18, r18
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	4a 8d       	ldd	r20, Y+26	; 0x1a
     578:	5b 8d       	ldd	r21, Y+27	; 0x1b
     57a:	24 0f       	add	r18, r20
     57c:	35 1f       	adc	r19, r21
     57e:	f9 01       	movw	r30, r18
     580:	30 81       	ld	r19, Z
     582:	4b 81       	ldd	r20, Y+3	; 0x03
     584:	2c 81       	ldd	r18, Y+4	; 0x04
     586:	24 27       	eor	r18, r20
     588:	23 27       	eor	r18, r19
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	2a 8d       	ldd	r18, Y+26	; 0x1a
     598:	3b 8d       	ldd	r19, Y+27	; 0x1b
     59a:	82 0f       	add	r24, r18
     59c:	93 1f       	adc	r25, r19
     59e:	29 81       	ldd	r18, Y+1	; 0x01
     5a0:	22 2f       	mov	r18, r18
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
     5a8:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5aa:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5ac:	24 0f       	add	r18, r20
     5ae:	35 1f       	adc	r19, r21
     5b0:	f9 01       	movw	r30, r18
     5b2:	30 81       	ld	r19, Z
     5b4:	4b 81       	ldd	r20, Y+3	; 0x03
     5b6:	2d 81       	ldd	r18, Y+5	; 0x05
     5b8:	24 27       	eor	r18, r20
     5ba:	23 27       	eor	r18, r19
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	02 96       	adiw	r24, 0x02	; 2
     5c8:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5ca:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	29 81       	ldd	r18, Y+1	; 0x01
     5d2:	22 2f       	mov	r18, r18
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	2e 5f       	subi	r18, 0xFE	; 254
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5dc:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5de:	24 0f       	add	r18, r20
     5e0:	35 1f       	adc	r19, r21
     5e2:	f9 01       	movw	r30, r18
     5e4:	30 81       	ld	r19, Z
     5e6:	4b 81       	ldd	r20, Y+3	; 0x03
     5e8:	2c 81       	ldd	r18, Y+4	; 0x04
     5ea:	24 27       	eor	r18, r20
     5ec:	23 27       	eor	r18, r19
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	03 96       	adiw	r24, 0x03	; 3
     5fa:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5fc:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	22 2f       	mov	r18, r18
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	2d 5f       	subi	r18, 0xFD	; 253
     60a:	3f 4f       	sbci	r19, 0xFF	; 255
     60c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     60e:	5b 8d       	ldd	r21, Y+27	; 0x1b
     610:	24 0f       	add	r18, r20
     612:	35 1f       	adc	r19, r21
     614:	f9 01       	movw	r30, r18
     616:	30 81       	ld	r19, Z
     618:	4b 81       	ldd	r20, Y+3	; 0x03
     61a:	2d 81       	ldd	r18, Y+5	; 0x05
     61c:	24 27       	eor	r18, r20
     61e:	23 27       	eor	r18, r19
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	8c 5f       	subi	r24, 0xFC	; 252
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	80 31       	cpi	r24, 0x10	; 16
     62e:	08 f4       	brcc	.+2      	; 0x632 <aes_decrypt_128+0x458>
     630:	64 ce       	rjmp	.-824    	; 0x2fa <aes_decrypt_128+0x120>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     632:	8a 8d       	ldd	r24, Y+26	; 0x1a
     634:	9b 8d       	ldd	r25, Y+27	; 0x1b
     636:	0e 94 6b 00 	call	0xd6	; 0xd6 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     63a:	19 82       	std	Y+1, r1	; 0x01
     63c:	1b c0       	rjmp	.+54     	; 0x674 <aes_decrypt_128+0x49a>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	88 2f       	mov	r24, r24
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	2a 8d       	ldd	r18, Y+26	; 0x1a
     646:	3b 8d       	ldd	r19, Y+27	; 0x1b
     648:	82 0f       	add	r24, r18
     64a:	93 1f       	adc	r25, r19
     64c:	29 81       	ldd	r18, Y+1	; 0x01
     64e:	22 2f       	mov	r18, r18
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	4a 8d       	ldd	r20, Y+26	; 0x1a
     654:	5b 8d       	ldd	r21, Y+27	; 0x1b
     656:	24 0f       	add	r18, r20
     658:	35 1f       	adc	r19, r21
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	22 2f       	mov	r18, r18
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	20 50       	subi	r18, 0x00	; 0
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	80 31       	cpi	r24, 0x10	; 16
     678:	10 f3       	brcs	.-60     	; 0x63e <aes_decrypt_128+0x464>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
     67a:	8e 89       	ldd	r24, Y+22	; 0x16
     67c:	9f 89       	ldd	r25, Y+23	; 0x17
     67e:	40 97       	sbiw	r24, 0x10	; 16
     680:	9f 8b       	std	Y+23, r25	; 0x17
     682:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	8a 30       	cpi	r24, 0x0A	; 10
     68e:	08 f4       	brcc	.+2      	; 0x692 <aes_decrypt_128+0x4b8>
     690:	0d ce       	rjmp	.-998    	; 0x2ac <aes_decrypt_128+0xd2>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     692:	19 82       	std	Y+1, r1	; 0x01
     694:	1f c0       	rjmp	.+62     	; 0x6d4 <aes_decrypt_128+0x4fa>
        *(plaintext+i) ^= *(roundkeys+i);
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	88 2f       	mov	r24, r24
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     69e:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	29 81       	ldd	r18, Y+1	; 0x01
     6a6:	22 2f       	mov	r18, r18
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	4a 8d       	ldd	r20, Y+26	; 0x1a
     6ac:	5b 8d       	ldd	r21, Y+27	; 0x1b
     6ae:	24 0f       	add	r18, r20
     6b0:	35 1f       	adc	r19, r21
     6b2:	f9 01       	movw	r30, r18
     6b4:	60 81       	ld	r22, Z
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	22 2f       	mov	r18, r18
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	4e 89       	ldd	r20, Y+22	; 0x16
     6be:	5f 89       	ldd	r21, Y+23	; 0x17
     6c0:	24 0f       	add	r18, r20
     6c2:	35 1f       	adc	r19, r21
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	26 27       	eor	r18, r22
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	89 83       	std	Y+1, r24	; 0x01
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	80 31       	cpi	r24, 0x10	; 16
     6d8:	f0 f2       	brcs	.-68     	; 0x696 <aes_decrypt_128+0x4bc>
        *(plaintext+i) ^= *(roundkeys+i);
    }

     6da:	6b 96       	adiw	r28, 0x1b	; 27
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	08 95       	ret

000006f2 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	0f 92       	push	r0
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	88 23       	and	r24, r24
     702:	4c f4       	brge	.+18     	; 0x716 <mul2+0x24>
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	98 2f       	mov	r25, r24
     710:	8b e1       	ldi	r24, 0x1B	; 27
     712:	89 27       	eor	r24, r25
     714:	02 c0       	rjmp	.+4      	; 0x71a <mul2+0x28>
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	88 0f       	add	r24, r24
}
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <shift_rows+0x6>
     728:	0f 92       	push	r0
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	9b 83       	std	Y+3, r25	; 0x03
     730:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	9b 81       	ldd	r25, Y+3	; 0x03
     736:	fc 01       	movw	r30, r24
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	9b 81       	ldd	r25, Y+3	; 0x03
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	2a 81       	ldd	r18, Y+2	; 0x02
     744:	3b 81       	ldd	r19, Y+3	; 0x03
     746:	f9 01       	movw	r30, r18
     748:	25 81       	ldd	r18, Z+5	; 0x05
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	9b 81       	ldd	r25, Y+3	; 0x03
     752:	05 96       	adiw	r24, 0x05	; 5
     754:	2a 81       	ldd	r18, Y+2	; 0x02
     756:	3b 81       	ldd	r19, Y+3	; 0x03
     758:	f9 01       	movw	r30, r18
     75a:	21 85       	ldd	r18, Z+9	; 0x09
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	9b 81       	ldd	r25, Y+3	; 0x03
     764:	09 96       	adiw	r24, 0x09	; 9
     766:	2a 81       	ldd	r18, Y+2	; 0x02
     768:	3b 81       	ldd	r19, Y+3	; 0x03
     76a:	f9 01       	movw	r30, r18
     76c:	25 85       	ldd	r18, Z+13	; 0x0d
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
    *(state+13) = temp;
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	0d 96       	adiw	r24, 0x0d	; 13
     778:	29 81       	ldd	r18, Y+1	; 0x01
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	9b 81       	ldd	r25, Y+3	; 0x03
     782:	fc 01       	movw	r30, r24
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	9b 81       	ldd	r25, Y+3	; 0x03
     78c:	02 96       	adiw	r24, 0x02	; 2
     78e:	2a 81       	ldd	r18, Y+2	; 0x02
     790:	3b 81       	ldd	r19, Y+3	; 0x03
     792:	f9 01       	movw	r30, r18
     794:	22 85       	ldd	r18, Z+10	; 0x0a
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
    *(state+10) = temp;
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	9b 81       	ldd	r25, Y+3	; 0x03
     79e:	0a 96       	adiw	r24, 0x0a	; 10
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
    temp        = *(state+6);
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	9b 81       	ldd	r25, Y+3	; 0x03
     7aa:	fc 01       	movw	r30, r24
     7ac:	86 81       	ldd	r24, Z+6	; 0x06
     7ae:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	9b 81       	ldd	r25, Y+3	; 0x03
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	2a 81       	ldd	r18, Y+2	; 0x02
     7b8:	3b 81       	ldd	r19, Y+3	; 0x03
     7ba:	f9 01       	movw	r30, r18
     7bc:	26 85       	ldd	r18, Z+14	; 0x0e
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
    *(state+14) = temp;
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	9b 81       	ldd	r25, Y+3	; 0x03
     7c6:	0e 96       	adiw	r24, 0x0e	; 14
     7c8:	29 81       	ldd	r18, Y+1	; 0x01
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	9b 81       	ldd	r25, Y+3	; 0x03
     7d2:	fc 01       	movw	r30, r24
     7d4:	87 85       	ldd	r24, Z+15	; 0x0f
     7d6:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	9b 81       	ldd	r25, Y+3	; 0x03
     7dc:	0f 96       	adiw	r24, 0x0f	; 15
     7de:	2a 81       	ldd	r18, Y+2	; 0x02
     7e0:	3b 81       	ldd	r19, Y+3	; 0x03
     7e2:	f9 01       	movw	r30, r18
     7e4:	23 85       	ldd	r18, Z+11	; 0x0b
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	9b 81       	ldd	r25, Y+3	; 0x03
     7ee:	0b 96       	adiw	r24, 0x0b	; 11
     7f0:	2a 81       	ldd	r18, Y+2	; 0x02
     7f2:	3b 81       	ldd	r19, Y+3	; 0x03
     7f4:	f9 01       	movw	r30, r18
     7f6:	27 81       	ldd	r18, Z+7	; 0x07
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	9b 81       	ldd	r25, Y+3	; 0x03
     800:	07 96       	adiw	r24, 0x07	; 7
     802:	2a 81       	ldd	r18, Y+2	; 0x02
     804:	3b 81       	ldd	r19, Y+3	; 0x03
     806:	f9 01       	movw	r30, r18
     808:	23 81       	ldd	r18, Z+3	; 0x03
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
    *(state+3)  = temp;
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	9b 81       	ldd	r25, Y+3	; 0x03
     812:	03 96       	adiw	r24, 0x03	; 3
     814:	29 81       	ldd	r18, Y+1	; 0x01
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <aes_encrypt_128>:

void aes_encrypt_128( uint8_t *roundkeys, uint8_t *plaintext, uint8_t *ciphertext) {
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	69 97       	sbiw	r28, 0x19	; 25
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	9d 8b       	std	Y+21, r25	; 0x15
     840:	8c 8b       	std	Y+20, r24	; 0x14
     842:	7f 8b       	std	Y+23, r23	; 0x17
     844:	6e 8b       	std	Y+22, r22	; 0x16
     846:	59 8f       	std	Y+25, r21	; 0x19
     848:	48 8f       	std	Y+24, r20	; 0x18

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     84a:	19 82       	std	Y+1, r1	; 0x01
     84c:	1f c0       	rjmp	.+62     	; 0x88c <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	28 8d       	ldd	r18, Y+24	; 0x18
     856:	39 8d       	ldd	r19, Y+25	; 0x19
     858:	82 0f       	add	r24, r18
     85a:	93 1f       	adc	r25, r19
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	22 2f       	mov	r18, r18
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	4e 89       	ldd	r20, Y+22	; 0x16
     864:	5f 89       	ldd	r21, Y+23	; 0x17
     866:	24 0f       	add	r18, r20
     868:	35 1f       	adc	r19, r21
     86a:	f9 01       	movw	r30, r18
     86c:	40 81       	ld	r20, Z
     86e:	2c 89       	ldd	r18, Y+20	; 0x14
     870:	3d 89       	ldd	r19, Y+21	; 0x15
     872:	f9 01       	movw	r30, r18
     874:	20 81       	ld	r18, Z
     876:	24 27       	eor	r18, r20
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
     87c:	8c 89       	ldd	r24, Y+20	; 0x14
     87e:	9d 89       	ldd	r25, Y+21	; 0x15
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	9d 8b       	std	Y+21, r25	; 0x15
     884:	8c 8b       	std	Y+20, r24	; 0x14

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	80 31       	cpi	r24, 0x10	; 16
     890:	f0 f2       	brcs	.-68     	; 0x84e <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	8a 83       	std	Y+2, r24	; 0x02
     896:	50 c1       	rjmp	.+672    	; 0xb38 <__stack+0x239>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     898:	19 82       	std	Y+1, r1	; 0x01
     89a:	1c c0       	rjmp	.+56     	; 0x8d4 <aes_encrypt_128+0xae>
            *(tmp+i) = SBOX[*(ciphertext+i)];
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	9e 01       	movw	r18, r28
     8a4:	2c 5f       	subi	r18, 0xFC	; 252
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	29 81       	ldd	r18, Y+1	; 0x01
     8ae:	22 2f       	mov	r18, r18
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	48 8d       	ldd	r20, Y+24	; 0x18
     8b4:	59 8d       	ldd	r21, Y+25	; 0x19
     8b6:	24 0f       	add	r18, r20
     8b8:	35 1f       	adc	r19, r21
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	22 2f       	mov	r18, r18
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	20 50       	subi	r18, 0x00	; 0
     8c4:	3e 4f       	sbci	r19, 0xFE	; 254
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	80 31       	cpi	r24, 0x10	; 16
     8d8:	08 f3       	brcs	.-62     	; 0x89c <aes_encrypt_128+0x76>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
     8da:	ce 01       	movw	r24, r28
     8dc:	04 96       	adiw	r24, 0x04	; 4
     8de:	0e 94 91 03 	call	0x722	; 0x722 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     8e2:	19 82       	std	Y+1, r1	; 0x01
     8e4:	fe c0       	rjmp	.+508    	; 0xae2 <__stack+0x1e3>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	9e 01       	movw	r18, r28
     8ee:	2c 5f       	subi	r18, 0xFC	; 252
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	82 0f       	add	r24, r18
     8f4:	93 1f       	adc	r25, r19
     8f6:	fc 01       	movw	r30, r24
     8f8:	40 81       	ld	r20, Z
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	9e 01       	movw	r18, r28
     904:	2c 5f       	subi	r18, 0xFC	; 252
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	82 0f       	add	r24, r18
     90a:	93 1f       	adc	r25, r19
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	48 27       	eor	r20, r24
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	88 2f       	mov	r24, r24
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	02 96       	adiw	r24, 0x02	; 2
     91a:	9e 01       	movw	r18, r28
     91c:	2c 5f       	subi	r18, 0xFC	; 252
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	82 0f       	add	r24, r18
     922:	93 1f       	adc	r25, r19
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
     928:	48 27       	eor	r20, r24
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	03 96       	adiw	r24, 0x03	; 3
     932:	9e 01       	movw	r18, r28
     934:	2c 5f       	subi	r18, 0xFC	; 252
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	84 27       	eor	r24, r20
     942:	8b 83       	std	Y+3, r24	; 0x03
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	28 8d       	ldd	r18, Y+24	; 0x18
     94c:	39 8d       	ldd	r19, Y+25	; 0x19
     94e:	89 01       	movw	r16, r18
     950:	08 0f       	add	r16, r24
     952:	19 1f       	adc	r17, r25
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9e 01       	movw	r18, r28
     95c:	2c 5f       	subi	r18, 0xFC	; 252
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	82 0f       	add	r24, r18
     962:	93 1f       	adc	r25, r19
     964:	fc 01       	movw	r30, r24
     966:	40 81       	ld	r20, Z
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	9e 01       	movw	r18, r28
     972:	2c 5f       	subi	r18, 0xFC	; 252
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	82 0f       	add	r24, r18
     978:	93 1f       	adc	r25, r19
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	84 27       	eor	r24, r20
     980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mul2>
     984:	48 2f       	mov	r20, r24
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9e 01       	movw	r18, r28
     98e:	2c 5f       	subi	r18, 0xFC	; 252
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	94 2f       	mov	r25, r20
     99c:	98 27       	eor	r25, r24
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	89 27       	eor	r24, r25
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	28 8d       	ldd	r18, Y+24	; 0x18
     9b0:	39 8d       	ldd	r19, Y+25	; 0x19
     9b2:	89 01       	movw	r16, r18
     9b4:	08 0f       	add	r16, r24
     9b6:	19 1f       	adc	r17, r25
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	9e 01       	movw	r18, r28
     9c2:	2c 5f       	subi	r18, 0xFC	; 252
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	fc 01       	movw	r30, r24
     9cc:	40 81       	ld	r20, Z
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 96       	adiw	r24, 0x02	; 2
     9d6:	9e 01       	movw	r18, r28
     9d8:	2c 5f       	subi	r18, 0xFC	; 252
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	82 0f       	add	r24, r18
     9de:	93 1f       	adc	r25, r19
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	84 27       	eor	r24, r20
     9e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mul2>
     9ea:	48 2f       	mov	r20, r24
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	88 2f       	mov	r24, r24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	9e 01       	movw	r18, r28
     9f6:	2c 5f       	subi	r18, 0xFC	; 252
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	94 2f       	mov	r25, r20
     a04:	98 27       	eor	r25, r24
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	89 27       	eor	r24, r25
     a0a:	f8 01       	movw	r30, r16
     a0c:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 96       	adiw	r24, 0x02	; 2
     a16:	28 8d       	ldd	r18, Y+24	; 0x18
     a18:	39 8d       	ldd	r19, Y+25	; 0x19
     a1a:	89 01       	movw	r16, r18
     a1c:	08 0f       	add	r16, r24
     a1e:	19 1f       	adc	r17, r25
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 96       	adiw	r24, 0x02	; 2
     a28:	9e 01       	movw	r18, r28
     a2a:	2c 5f       	subi	r18, 0xFC	; 252
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	fc 01       	movw	r30, r24
     a34:	40 81       	ld	r20, Z
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	03 96       	adiw	r24, 0x03	; 3
     a3e:	9e 01       	movw	r18, r28
     a40:	2c 5f       	subi	r18, 0xFC	; 252
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	82 0f       	add	r24, r18
     a46:	93 1f       	adc	r25, r19
     a48:	fc 01       	movw	r30, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	84 27       	eor	r24, r20
     a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mul2>
     a52:	48 2f       	mov	r20, r24
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	02 96       	adiw	r24, 0x02	; 2
     a5c:	9e 01       	movw	r18, r28
     a5e:	2c 5f       	subi	r18, 0xFC	; 252
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	82 0f       	add	r24, r18
     a64:	93 1f       	adc	r25, r19
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	94 2f       	mov	r25, r20
     a6c:	98 27       	eor	r25, r24
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	89 27       	eor	r24, r25
     a72:	f8 01       	movw	r30, r16
     a74:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	03 96       	adiw	r24, 0x03	; 3
     a7e:	28 8d       	ldd	r18, Y+24	; 0x18
     a80:	39 8d       	ldd	r19, Y+25	; 0x19
     a82:	89 01       	movw	r16, r18
     a84:	08 0f       	add	r16, r24
     a86:	19 1f       	adc	r17, r25
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	03 96       	adiw	r24, 0x03	; 3
     a90:	9e 01       	movw	r18, r28
     a92:	2c 5f       	subi	r18, 0xFC	; 252
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	fc 01       	movw	r30, r24
     a9c:	40 81       	ld	r20, Z
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9e 01       	movw	r18, r28
     aa6:	2c 5f       	subi	r18, 0xFC	; 252
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	82 0f       	add	r24, r18
     aac:	93 1f       	adc	r25, r19
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	84 27       	eor	r24, r20
     ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <mul2>
     ab8:	48 2f       	mov	r20, r24
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	03 96       	adiw	r24, 0x03	; 3
     ac2:	9e 01       	movw	r18, r28
     ac4:	2c 5f       	subi	r18, 0xFC	; 252
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	82 0f       	add	r24, r18
     aca:	93 1f       	adc	r25, r19
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	94 2f       	mov	r25, r20
     ad2:	98 27       	eor	r25, r24
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	89 27       	eor	r24, r25
     ad8:	f8 01       	movw	r30, r16
     ada:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8c 5f       	subi	r24, 0xFC	; 252
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	80 31       	cpi	r24, 0x10	; 16
     ae6:	08 f4       	brcc	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	fe ce       	rjmp	.-516    	; 0x8e6 <aes_encrypt_128+0xc0>
		}
			     
	    
	
        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     aea:	19 82       	std	Y+1, r1	; 0x01
     aec:	1f c0       	rjmp	.+62     	; 0xb2c <__stack+0x22d>
            *(ciphertext+i) ^= *roundkeys++;
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	28 8d       	ldd	r18, Y+24	; 0x18
     af6:	39 8d       	ldd	r19, Y+25	; 0x19
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	29 81       	ldd	r18, Y+1	; 0x01
     afe:	22 2f       	mov	r18, r18
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	48 8d       	ldd	r20, Y+24	; 0x18
     b04:	59 8d       	ldd	r21, Y+25	; 0x19
     b06:	24 0f       	add	r18, r20
     b08:	35 1f       	adc	r19, r21
     b0a:	f9 01       	movw	r30, r18
     b0c:	40 81       	ld	r20, Z
     b0e:	2c 89       	ldd	r18, Y+20	; 0x14
     b10:	3d 89       	ldd	r19, Y+21	; 0x15
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	24 27       	eor	r18, r20
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
     b1c:	8c 89       	ldd	r24, Y+20	; 0x14
     b1e:	9d 89       	ldd	r25, Y+21	; 0x15
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	9d 8b       	std	Y+21, r25	; 0x15
     b24:	8c 8b       	std	Y+20, r24	; 0x14
		}
			     
	    
	
        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	80 31       	cpi	r24, 0x10	; 16
     b30:	f0 f2       	brcs	.-68     	; 0xaee <__stack+0x1ef>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	8a 83       	std	Y+2, r24	; 0x02
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	8a 30       	cpi	r24, 0x0A	; 10
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <__stack+0x241>
     b3e:	ac ce       	rjmp	.-680    	; 0x898 <aes_encrypt_128+0x72>
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
            *(ciphertext+i) ^= *roundkeys++;
        }
    }
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b40:	19 82       	std	Y+1, r1	; 0x01
     b42:	1b c0       	rjmp	.+54     	; 0xb7a <__stack+0x27b>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	28 8d       	ldd	r18, Y+24	; 0x18
     b4c:	39 8d       	ldd	r19, Y+25	; 0x19
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	22 2f       	mov	r18, r18
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	48 8d       	ldd	r20, Y+24	; 0x18
     b5a:	59 8d       	ldd	r21, Y+25	; 0x19
     b5c:	24 0f       	add	r18, r20
     b5e:	35 1f       	adc	r19, r21
     b60:	f9 01       	movw	r30, r18
     b62:	20 81       	ld	r18, Z
     b64:	22 2f       	mov	r18, r18
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	20 50       	subi	r18, 0x00	; 0
     b6a:	3e 4f       	sbci	r19, 0xFE	; 254
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
            *(ciphertext+i) ^= *roundkeys++;
        }
    }
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	80 31       	cpi	r24, 0x10	; 16
     b7e:	10 f3       	brcs	.-60     	; 0xb44 <__stack+0x245>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
     b80:	88 8d       	ldd	r24, Y+24	; 0x18
     b82:	99 8d       	ldd	r25, Y+25	; 0x19
     b84:	0e 94 91 03 	call	0x722	; 0x722 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b88:	19 82       	std	Y+1, r1	; 0x01
     b8a:	1f c0       	rjmp	.+62     	; 0xbca <__stack+0x2cb>
        *(ciphertext+i) ^= *roundkeys++;
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	28 8d       	ldd	r18, Y+24	; 0x18
     b94:	39 8d       	ldd	r19, Y+25	; 0x19
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	29 81       	ldd	r18, Y+1	; 0x01
     b9c:	22 2f       	mov	r18, r18
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	48 8d       	ldd	r20, Y+24	; 0x18
     ba2:	59 8d       	ldd	r21, Y+25	; 0x19
     ba4:	24 0f       	add	r18, r20
     ba6:	35 1f       	adc	r19, r21
     ba8:	f9 01       	movw	r30, r18
     baa:	40 81       	ld	r20, Z
     bac:	2c 89       	ldd	r18, Y+20	; 0x14
     bae:	3d 89       	ldd	r19, Y+21	; 0x15
     bb0:	f9 01       	movw	r30, r18
     bb2:	20 81       	ld	r18, Z
     bb4:	24 27       	eor	r18, r20
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	8c 89       	ldd	r24, Y+20	; 0x14
     bbc:	9d 89       	ldd	r25, Y+21	; 0x15
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	9d 8b       	std	Y+21, r25	; 0x15
     bc2:	8c 8b       	std	Y+20, r24	; 0x14
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	80 31       	cpi	r24, 0x10	; 16
     bce:	f0 f2       	brcs	.-68     	; 0xb8c <__stack+0x28d>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
     bd0:	69 96       	adiw	r28, 0x19	; 25
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
static uint8_t RC[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128(uint8_t *key, uint8_t *roundkeys) {
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	2d 97       	sbiw	r28, 0x0d	; 13
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	9b 87       	std	Y+11, r25	; 0x0b
     bfc:	8a 87       	std	Y+10, r24	; 0x0a
     bfe:	7d 87       	std	Y+13, r23	; 0x0d
     c00:	6c 87       	std	Y+12, r22	; 0x0c
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     c02:	1b 82       	std	Y+3, r1	; 0x03
     c04:	15 c0       	rjmp	.+42     	; 0xc30 <aes_key_schedule_128+0x4a>
        *roundkeys++ = *key++;
     c06:	8a 85       	ldd	r24, Y+10	; 0x0a
     c08:	9b 85       	ldd	r25, Y+11	; 0x0b
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 81       	ld	r18, Z
     c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c10:	9d 85       	ldd	r25, Y+13	; 0x0d
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
     c16:	8c 85       	ldd	r24, Y+12	; 0x0c
     c18:	9d 85       	ldd	r25, Y+13	; 0x0d
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	9d 87       	std	Y+13, r25	; 0x0d
     c1e:	8c 87       	std	Y+12, r24	; 0x0c
     c20:	8a 85       	ldd	r24, Y+10	; 0x0a
     c22:	9b 85       	ldd	r25, Y+11	; 0x0b
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	9b 87       	std	Y+11, r25	; 0x0b
     c28:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	8b 83       	std	Y+3, r24	; 0x03
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	80 31       	cpi	r24, 0x10	; 16
     c34:	40 f3       	brcs	.-48     	; 0xc06 <aes_key_schedule_128+0x20>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
     c36:	8c 85       	ldd	r24, Y+12	; 0x0c
     c38:	9d 85       	ldd	r25, Y+13	; 0x0d
     c3a:	04 97       	sbiw	r24, 0x04	; 4
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
     c40:	1b 82       	std	Y+3, r1	; 0x03
     c42:	f2 c1       	rjmp	.+996    	; 0x1028 <aes_key_schedule_128+0x442>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	80 50       	subi	r24, 0x00	; 0
     c52:	9e 4f       	sbci	r25, 0xFE	; 254
     c54:	fc 01       	movw	r30, r24
     c56:	80 81       	ld	r24, Z
     c58:	89 87       	std	Y+9, r24	; 0x09
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
        temp[0] = SBOX[*last4bytes++];
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	fc 01       	movw	r30, r24
     c6a:	80 81       	ld	r24, Z
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	80 50       	subi	r24, 0x00	; 0
     c72:	9e 4f       	sbci	r25, 0xFE	; 254
     c74:	fc 01       	movw	r30, r24
     c76:	80 81       	ld	r24, Z
     c78:	8e 83       	std	Y+6, r24	; 0x06
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
        temp[1] = SBOX[*last4bytes++];
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	80 50       	subi	r24, 0x00	; 0
     c92:	9e 4f       	sbci	r25, 0xFE	; 254
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	8f 83       	std	Y+7, r24	; 0x07
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
        temp[2] = SBOX[*last4bytes++];
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	fc 01       	movw	r30, r24
     caa:	80 81       	ld	r24, Z
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	80 50       	subi	r24, 0x00	; 0
     cb2:	9e 4f       	sbci	r25, 0xFE	; 254
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	88 87       	std	Y+8, r24	; 0x08
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
        temp[0] ^= RC[i];
     cc4:	2e 81       	ldd	r18, Y+6	; 0x06
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	80 50       	subi	r24, 0x00	; 0
     cce:	9d 4f       	sbci	r25, 0xFD	; 253
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	82 27       	eor	r24, r18
     cd6:	8e 83       	std	Y+6, r24	; 0x06
        lastround = roundkeys-16;
     cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cda:	9d 85       	ldd	r25, Y+13	; 0x0d
     cdc:	40 97       	sbiw	r24, 0x10	; 16
     cde:	9d 83       	std	Y+5, r25	; 0x05
     ce0:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[0] ^ *lastround++;
     ce2:	2e 81       	ldd	r18, Y+6	; 0x06
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	28 27       	eor	r18, r24
     cee:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	9d 87       	std	Y+13, r25	; 0x0d
     cfe:	8c 87       	std	Y+12, r24	; 0x0c
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	9d 83       	std	Y+5, r25	; 0x05
     d08:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[1] ^ *lastround++;
     d0a:	2f 81       	ldd	r18, Y+7	; 0x07
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	28 27       	eor	r18, r24
     d16:	8c 85       	ldd	r24, Y+12	; 0x0c
     d18:	9d 85       	ldd	r25, Y+13	; 0x0d
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
     d1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d20:	9d 85       	ldd	r25, Y+13	; 0x0d
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	9d 87       	std	Y+13, r25	; 0x0d
     d26:	8c 87       	std	Y+12, r24	; 0x0c
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	9d 81       	ldd	r25, Y+5	; 0x05
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	9d 83       	std	Y+5, r25	; 0x05
     d30:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[2] ^ *lastround++;
     d32:	28 85       	ldd	r18, Y+8	; 0x08
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	28 27       	eor	r18, r24
     d3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d40:	9d 85       	ldd	r25, Y+13	; 0x0d
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
     d46:	8c 85       	ldd	r24, Y+12	; 0x0c
     d48:	9d 85       	ldd	r25, Y+13	; 0x0d
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	9d 87       	std	Y+13, r25	; 0x0d
     d4e:	8c 87       	std	Y+12, r24	; 0x0c
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	9d 83       	std	Y+5, r25	; 0x05
     d58:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[3] ^ *lastround++;
     d5a:	29 85       	ldd	r18, Y+9	; 0x09
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	28 27       	eor	r18, r24
     d66:	8c 85       	ldd	r24, Y+12	; 0x0c
     d68:	9d 85       	ldd	r25, Y+13	; 0x0d
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
     d6e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d70:	9d 85       	ldd	r25, Y+13	; 0x0d
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	9d 87       	std	Y+13, r25	; 0x0d
     d76:	8c 87       	std	Y+12, r24	; 0x0c
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	9d 83       	std	Y+5, r25	; 0x05
     d80:	8c 83       	std	Y+4, r24	; 0x04
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	fc 01       	movw	r30, r24
     d88:	20 81       	ld	r18, Z
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	28 27       	eor	r18, r24
     d94:	8c 85       	ldd	r24, Y+12	; 0x0c
     d96:	9d 85       	ldd	r25, Y+13	; 0x0d
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
     d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d9e:	9d 85       	ldd	r25, Y+13	; 0x0d
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9d 87       	std	Y+13, r25	; 0x0d
     da4:	8c 87       	std	Y+12, r24	; 0x0c
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	9d 83       	std	Y+5, r25	; 0x05
     db8:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 81       	ld	r18, Z
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	9d 81       	ldd	r25, Y+5	; 0x05
     dc6:	fc 01       	movw	r30, r24
     dc8:	80 81       	ld	r24, Z
     dca:	28 27       	eor	r18, r24
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
     dd4:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd6:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	9d 87       	std	Y+13, r25	; 0x0d
     ddc:	8c 87       	std	Y+12, r24	; 0x0c
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	9d 83       	std	Y+5, r25	; 0x05
     df0:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	20 81       	ld	r18, Z
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	28 27       	eor	r18, r24
     e04:	8c 85       	ldd	r24, Y+12	; 0x0c
     e06:	9d 85       	ldd	r25, Y+13	; 0x0d
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9d 87       	std	Y+13, r25	; 0x0d
     e14:	8c 87       	std	Y+12, r24	; 0x0c
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	9d 83       	std	Y+5, r25	; 0x05
     e28:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	fc 01       	movw	r30, r24
     e30:	20 81       	ld	r18, Z
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	9d 81       	ldd	r25, Y+5	; 0x05
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	28 27       	eor	r18, r24
     e3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
     e44:	8c 85       	ldd	r24, Y+12	; 0x0c
     e46:	9d 85       	ldd	r25, Y+13	; 0x0d
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	9d 87       	std	Y+13, r25	; 0x0d
     e4c:	8c 87       	std	Y+12, r24	; 0x0c
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	9d 83       	std	Y+5, r25	; 0x05
     e60:	8c 83       	std	Y+4, r24	; 0x04
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	fc 01       	movw	r30, r24
     e68:	20 81       	ld	r18, Z
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	fc 01       	movw	r30, r24
     e70:	80 81       	ld	r24, Z
     e72:	28 27       	eor	r18, r24
     e74:	8c 85       	ldd	r24, Y+12	; 0x0c
     e76:	9d 85       	ldd	r25, Y+13	; 0x0d
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
     e7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	9d 87       	std	Y+13, r25	; 0x0d
     e84:	8c 87       	std	Y+12, r24	; 0x0c
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	9d 83       	std	Y+5, r25	; 0x05
     e98:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 81       	ld	r18, Z
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	28 27       	eor	r18, r24
     eac:	8c 85       	ldd	r24, Y+12	; 0x0c
     eae:	9d 85       	ldd	r25, Y+13	; 0x0d
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
     eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9d 87       	std	Y+13, r25	; 0x0d
     ebc:	8c 87       	std	Y+12, r24	; 0x0c
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	9d 83       	std	Y+5, r25	; 0x05
     ed0:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 81       	ld	r18, Z
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	28 27       	eor	r18, r24
     ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
     eec:	8c 85       	ldd	r24, Y+12	; 0x0c
     eee:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	9d 87       	std	Y+13, r25	; 0x0d
     ef4:	8c 87       	std	Y+12, r24	; 0x0c
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	9d 83       	std	Y+5, r25	; 0x05
     f08:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	fc 01       	movw	r30, r24
     f10:	20 81       	ld	r18, Z
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	28 27       	eor	r18, r24
     f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f20:	fc 01       	movw	r30, r24
     f22:	20 83       	st	Z, r18
     f24:	8c 85       	ldd	r24, Y+12	; 0x0c
     f26:	9d 85       	ldd	r25, Y+13	; 0x0d
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	9d 87       	std	Y+13, r25	; 0x0d
     f2c:	8c 87       	std	Y+12, r24	; 0x0c
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	9d 81       	ldd	r25, Y+5	; 0x05
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	9d 83       	std	Y+5, r25	; 0x05
     f40:	8c 83       	std	Y+4, r24	; 0x04
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	20 81       	ld	r18, Z
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	28 27       	eor	r18, r24
     f54:	8c 85       	ldd	r24, Y+12	; 0x0c
     f56:	9d 85       	ldd	r25, Y+13	; 0x0d
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
     f5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f5e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	9d 87       	std	Y+13, r25	; 0x0d
     f64:	8c 87       	std	Y+12, r24	; 0x0c
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9d 83       	std	Y+5, r25	; 0x05
     f78:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	fc 01       	movw	r30, r24
     f80:	20 81       	ld	r18, Z
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	28 27       	eor	r18, r24
     f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18
     f94:	8c 85       	ldd	r24, Y+12	; 0x0c
     f96:	9d 85       	ldd	r25, Y+13	; 0x0d
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	9d 87       	std	Y+13, r25	; 0x0d
     f9c:	8c 87       	std	Y+12, r24	; 0x0c
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	9d 83       	std	Y+5, r25	; 0x05
     fb0:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 81       	ld	r18, Z
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	fc 01       	movw	r30, r24
     fc0:	80 81       	ld	r24, Z
     fc2:	28 27       	eor	r18, r24
     fc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
     fcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     fce:	9d 85       	ldd	r25, Y+13	; 0x0d
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	9d 87       	std	Y+13, r25	; 0x0d
     fd4:	8c 87       	std	Y+12, r24	; 0x0c
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	9d 83       	std	Y+5, r25	; 0x05
     fe8:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	fc 01       	movw	r30, r24
     ff0:	20 81       	ld	r18, Z
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	fc 01       	movw	r30, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	28 27       	eor	r18, r24
     ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	8c 85       	ldd	r24, Y+12	; 0x0c
    1006:	9d 85       	ldd	r25, Y+13	; 0x0d
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	9d 87       	std	Y+13, r25	; 0x0d
    100c:	8c 87       	std	Y+12, r24	; 0x0c
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	9d 83       	std	Y+5, r25	; 0x05
    1020:	8c 83       	std	Y+4, r24	; 0x04
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	08 f4       	brcc	.+2      	; 0x1030 <aes_key_schedule_128+0x44a>
    102e:	0a ce       	rjmp	.-1004   	; 0xc44 <aes_key_schedule_128+0x5e>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    1030:	2d 96       	adiw	r28, 0x0d	; 13
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(int argc, char *argv[]) {
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	c5 5f       	subi	r28, 0xF5	; 245
    104c:	d0 40       	sbci	r29, 0x00	; 0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	9e 01       	movw	r18, r28
    105a:	2e 50       	subi	r18, 0x0E	; 14
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	f9 01       	movw	r30, r18
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
    1064:	ce 01       	movw	r24, r28
    1066:	8c 50       	subi	r24, 0x0C	; 12
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	fc 01       	movw	r30, r24
    106c:	71 83       	std	Z+1, r23	; 0x01
    106e:	60 83       	st	Z, r22

	uint8_t i;

	/* 128 bit key */
	 uint8_t key[] = {
    1070:	ce 01       	movw	r24, r28
    1072:	02 96       	adiw	r24, 0x02	; 2
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	33 e0       	ldi	r19, 0x03	; 3
    1078:	40 e1       	ldi	r20, 0x10	; 16
    107a:	f9 01       	movw	r30, r18
    107c:	00 80       	ld	r0, Z
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	fc 01       	movw	r30, r24
    1084:	00 82       	st	Z, r0
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	41 50       	subi	r20, 0x01	; 1
    108a:	44 23       	and	r20, r20
    108c:	b1 f7       	brne	.-20     	; 0x107a <main+0x38>
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

	uint8_t plaintext[] = {
    108e:	ce 01       	movw	r24, r28
    1090:	42 96       	adiw	r24, 0x12	; 18
    1092:	2a e1       	ldi	r18, 0x1A	; 26
    1094:	33 e0       	ldi	r19, 0x03	; 3
    1096:	40 e1       	ldi	r20, 0x10	; 16
    1098:	f9 01       	movw	r30, r18
    109a:	00 80       	ld	r0, Z
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	fc 01       	movw	r30, r24
    10a2:	00 82       	st	Z, r0
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	41 50       	subi	r20, 0x01	; 1
    10a8:	44 23       	and	r20, r20
    10aa:	b1 f7       	brne	.-20     	; 0x1098 <main+0x56>
	};

 
	 uint8_t ciphertext[AES_BLOCK_SIZE];

	const uint8_t const_cipher[AES_BLOCK_SIZE] = {
    10ac:	ce 01       	movw	r24, r28
    10ae:	c2 96       	adiw	r24, 0x32	; 50
    10b0:	2a e2       	ldi	r18, 0x2A	; 42
    10b2:	33 e0       	ldi	r19, 0x03	; 3
    10b4:	40 e1       	ldi	r20, 0x10	; 16
    10b6:	f9 01       	movw	r30, r18
    10b8:	00 80       	ld	r0, Z
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	fc 01       	movw	r30, r24
    10c0:	00 82       	st	Z, r0
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	41 50       	subi	r20, 0x01	; 1
    10c6:	44 23       	and	r20, r20
    10c8:	b1 f7       	brne	.-20     	; 0x10b6 <main+0x74>
	};
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(key, roundkeys);
    10ca:	ce 01       	movw	r24, r28
    10cc:	02 96       	adiw	r24, 0x02	; 2
    10ce:	9e 01       	movw	r18, r28
    10d0:	2e 5b       	subi	r18, 0xBE	; 190
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <aes_key_schedule_128>

	// encryption
	
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
    10da:	ce 01       	movw	r24, r28
    10dc:	8e 5b       	subi	r24, 0xBE	; 190
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	ae 01       	movw	r20, r28
    10e2:	4e 5e       	subi	r20, 0xEE	; 238
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	9e 01       	movw	r18, r28
    10e8:	2e 5d       	subi	r18, 0xDE	; 222
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	ba 01       	movw	r22, r20
    10ee:	a9 01       	movw	r20, r18
    10f0:	0e 94 13 04 	call	0x826	; 0x826 <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <main+0xe8>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9e 01       	movw	r18, r28
    1100:	2e 5d       	subi	r18, 0xDE	; 222
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	fc 01       	movw	r30, r24
    110a:	40 81       	ld	r20, Z
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 01       	movw	r18, r28
    1114:	2e 5c       	subi	r18, 0xCE	; 206
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	48 17       	cp	r20, r24
    1122:	39 f4       	brne	.+14     	; 0x1132 <main+0xf0>

	// encryption
	
	aes_encrypt_128(roundkeys, plaintext, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	80 31       	cpi	r24, 0x10	; 16
    112e:	20 f3       	brcs	.-56     	; 0x10f8 <main+0xb6>
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <main+0xf2>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    1132:	00 00       	nop
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    1134:	ce 01       	movw	r24, r28
    1136:	8e 5b       	subi	r24, 0xBE	; 190
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	ae 01       	movw	r20, r28
    113c:	4e 5d       	subi	r20, 0xDE	; 222
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	9e 01       	movw	r18, r28
    1142:	2e 5d       	subi	r18, 0xDE	; 222
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	ba 01       	movw	r22, r20
    1148:	a9 01       	movw	r20, r18
    114a:	0e 94 ed 00 	call	0x1da	; 0x1da <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	19 c0       	rjmp	.+50     	; 0x1184 <main+0x142>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9e 01       	movw	r18, r28
    115a:	2e 5d       	subi	r18, 0xDE	; 222
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	82 0f       	add	r24, r18
    1160:	93 1f       	adc	r25, r19
    1162:	fc 01       	movw	r30, r24
    1164:	40 81       	ld	r20, Z
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9e 01       	movw	r18, r28
    116e:	2e 5e       	subi	r18, 0xEE	; 238
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	48 17       	cp	r20, r24
    117c:	39 f4       	brne	.+14     	; 0x118c <main+0x14a>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	80 31       	cpi	r24, 0x10	; 16
    1188:	20 f3       	brcs	.-56     	; 0x1152 <main+0x110>
    118a:	01 c0       	rjmp	.+2      	; 0x118e <main+0x14c>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    118c:	00 00       	nop
	}

	return 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
}
    1192:	cb 50       	subi	r28, 0x0B	; 11
    1194:	df 4f       	sbci	r29, 0xFF	; 255
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <_exit>:
    11a6:	f8 94       	cli

000011a8 <__stop_program>:
    11a8:	ff cf       	rjmp	.-2      	; 0x11a8 <__stop_program>
